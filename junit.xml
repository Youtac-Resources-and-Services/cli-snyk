<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="921" failures="14" errors="0" time="82.076">
  <testsuite name="Test snyk code" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:21" time="9.34" tests="33">
    <testcase classname="Test snyk code should fail if auth fails" name="Test snyk code should fail if auth fails" time="0.007">
    </testcase>
    <testcase classname="Test snyk code should use oauth token for auth if provided" name="Test snyk code should use oauth token for auth if provided" time="0.004">
    </testcase>
    <testcase classname="Test snyk code should fail - when we do not support files" name="Test snyk code should fail - when we do not support files" time="0.002">
    </testcase>
    <testcase classname="Test snyk code succeed testing - with correct exit code" name="Test snyk code succeed testing - with correct exit code" time="0.006">
    </testcase>
    <testcase classname="Test snyk code should succeed testing from the cli test command - with correct exit code" name="Test snyk code should succeed testing from the cli test command - with correct exit code" time="0.008">
    </testcase>
    <testcase classname="Test snyk code should throw error when response code is not 200" name="Test snyk code should throw error when response code is not 200" time="0.001">
    </testcase>
    <testcase classname="Test snyk code should throw error correctly from outside of ecosystem flow when response code is not 200" name="Test snyk code should throw error correctly from outside of ecosystem flow when response code is not 200" time="0.001">
    </testcase>
    <testcase classname="Test snyk code should show error if sast is not enabled" name="Test snyk code should show error if sast is not enabled" time="0.001">
    </testcase>
    <testcase classname="Test snyk code should show org not found error according to response from api" name="Test snyk code should show org not found error according to response from api" time="0.001">
    </testcase>
    <testcase classname="Test snyk code should show error if limit is reached" name="Test snyk code should show error if limit is reached" time="0.001">
    </testcase>
    <testcase classname="Test snyk code should write only sarif result to file when only `--sarif-file-output` is used" name="Test snyk code should write only sarif result to file when only `--sarif-file-output` is used" time="0.004">
    </testcase>
    <testcase classname="Test snyk code should write only json result to file when only `--json-file-output` is used" name="Test snyk code should write only json result to file when only `--json-file-output` is used" time="0.003">
    </testcase>
    <testcase classname="Test snyk code should write sarif and json results to file when `--sarif-file-output` and `--json-file-output` are used" name="Test snyk code should write sarif and json results to file when `--sarif-file-output` and `--json-file-output` are used" time="0.012">
    </testcase>
    <testcase classname="Test snyk code should create sarif result with security rules mapping" name="Test snyk code should create sarif result with security rules mapping" time="0.003">
    </testcase>
    <testcase classname="Test snyk code Default org test in CLI output should show the default org in the output when org is not provided" name="Test snyk code Default org test in CLI output should show the default org in the output when org is not provided" time="0.006">
    </testcase>
    <testcase classname="Test snyk code Default org test in CLI output should show the provided org in the output when org is provided" name="Test snyk code Default org test in CLI output should show the provided org in the output when org is provided" time="0.003">
    </testcase>
    <testcase classname="Test snyk code should pass org returned by settings to analysis context" name="Test snyk code should pass org returned by settings to analysis context" time="0.004">
    </testcase>
    <testcase classname="Test snyk code succeed testing with correct exit code - with &quot;sarif&quot; output" name="Test snyk code succeed testing with correct exit code - with &quot;sarif&quot; output" time="0.006">
    </testcase>
    <testcase classname="Test snyk code succeed testing with correct exit code - with &quot;json&quot; output" name="Test snyk code succeed testing with correct exit code - with &quot;json&quot; output" time="0.011">
    </testcase>
    <testcase classname="Test snyk code succeed testing with correct exit code - with sarif output" name="Test snyk code succeed testing with correct exit code - with sarif output" time="0.003">
    </testcase>
    <testcase classname="Test snyk code succeed testing with correct exit code - with sarif output and no markdown" name="Test snyk code succeed testing with correct exit code - with sarif output and no markdown" time="0.003">
    </testcase>
    <testcase classname="Test snyk code succeed testing with correct exit code - and analytics added" name="Test snyk code succeed testing with correct exit code - and analytics added" time="0.002">
    </testcase>
    <testcase classname="Test snyk code given {&quot;code&quot;: 401} argument, we fail with error message &quot;Unauthorized: Failed to run &apos;code test&apos;&quot;" name="Test snyk code given {&quot;code&quot;: 401} argument, we fail with error message &quot;Unauthorized: Failed to run &apos;code test&apos;&quot;" time="0">
    </testcase>
    <testcase classname="Test snyk code given {&quot;code&quot;: 500} argument, we fail with error message &quot;Failed to run &apos;code test&apos;&quot;" name="Test snyk code given {&quot;code&quot;: 500} argument, we fail with error message &quot;Failed to run &apos;code test&apos;&quot;" time="0.001">
    </testcase>
    <testcase classname="Test snyk code When code-client fails, generalizes message for non-auth failures" name="Test snyk code When code-client fails, generalizes message for non-auth failures" time="0">
    </testcase>
    <testcase classname="Test snyk code When code-client fails with details, show message with failure details" name="Test snyk code When code-client fails with details, show message with failure details" time="0.001">
    </testcase>
    <testcase classname="Test snyk code analyzeFolders should be called with the right arguments" name="Test snyk code analyzeFolders should be called with the right arguments" time="0.001">
    </testcase>
    <testcase classname="Test snyk code analyzeFolders should return the right sarif response" name="Test snyk code analyzeFolders should return the right sarif response" time="0.006">
    </testcase>
    <testcase classname="Test snyk code Local code engine - analyzeFolders should use LCE&apos;s url as base when LCE is enabled" name="Test snyk code Local code engine - analyzeFolders should use LCE&apos;s url as base when LCE is enabled" time="0.001">
    </testcase>
    <testcase classname="Test snyk code Local code engine - analyzeFolders should use cloud solution when LCE&apos;s feature is not enabled" name="Test snyk code Local code engine - analyzeFolders should use cloud solution when LCE&apos;s feature is not enabled" time="0.001">
    </testcase>
    <testcase classname="Test snyk code Local Code Engine - Always calls code-client with url coming from sastSettings" name="Test snyk code Local Code Engine - Always calls code-client with url coming from sastSettings" time="0">
    </testcase>
    <testcase classname="Test snyk code Local code engine - makes GET /status to get SCLE version" name="Test snyk code Local code engine - makes GET /status to get SCLE version" time="0.001">
    </testcase>
    <testcase classname="Test snyk code Local Code Engine - Scans are not interrupted if /status call fails" name="Test snyk code Local Code Engine - Scans are not interrupted if /status call fails" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="test" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:30" time="2.149" tests="10">
    <testcase classname="test outputs the test results" name="test outputs the test results" time="0.207">
    </testcase>
    <testcase classname="test with no successful scans throws the expected error" name="test with no successful scans throws the expected error" time="0.049">
    </testcase>
    <testcase classname="test with no successful scans without loadable inputs throws the expected error" name="test with no successful scans without loadable inputs throws the expected error" time="0.189">
    </testcase>
    <testcase classname="test with issues throws the expected error" name="test with issues throws the expected error" time="0.025">
    </testcase>
    <testcase classname="test with `--json` flag outputs the test results in JSON format" name="test with `--json` flag outputs the test results in JSON format" time="0.012">
    </testcase>
    <testcase classname="test with `--json` flag with no successful scans throws the expected error" name="test with `--json` flag with no successful scans throws the expected error" time="0.011">
    </testcase>
    <testcase classname="test with `--json` flag with no successful scans without loadable inputs throws the expected error" name="test with `--json` flag with no successful scans without loadable inputs throws the expected error" time="0.022">
    </testcase>
    <testcase classname="test with `--sarif` flag outputs the test results in SARIF format" name="test with `--sarif` flag outputs the test results in SARIF format" time="0.019">
    </testcase>
    <testcase classname="test with `--sarif` flag with no successful scans throws the expected error" name="test with `--sarif` flag with no successful scans throws the expected error" time="0.017">
    </testcase>
    <testcase classname="test with `--sarif` flag with no successful scans without loadable inputs throws the expected error" name="test with `--sarif` flag with no successful scans without loadable inputs throws the expected error" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="snyk fix (functional tests)" errors="0" failures="7" skipped="0" timestamp="2024-06-12T20:45:33" time="1.208" tests="7">
    <testcase classname="snyk fix (functional tests) shows successful fixes Python requirements.txt project was fixed via --file" name="snyk fix (functional tests) shows successful fixes Python requirements.txt project was fixed via --file" time="0.001">
      <failure>MissingApiTokenError: `snyk` requires an authenticated account. Please run `snyk auth` and try again.
    at apiTokenExists (/project/workspace/src/lib/api-token.ts:23:15)
    at validateCredentials (/project/workspace/src/cli/commands/test/validate-credentials.ts:7:40)
    at fix (/project/workspace/src/cli/commands/fix/index.ts:30:52)
    at Object.&lt;anonymous&gt; (/project/workspace/test/jest/unit/lib/commands/fix/fix.spec.ts:53:21)</failure>
    </testcase>
    <testcase classname="snyk fix (functional tests) shows successful fixes Python requirements.txt project on stdout" name="snyk fix (functional tests) shows successful fixes Python requirements.txt project on stdout" time="0">
      <failure>MissingApiTokenError: `snyk` requires an authenticated account. Please run `snyk auth` and try again.
    at apiTokenExists (/project/workspace/src/lib/api-token.ts:23:15)
    at validateCredentials (/project/workspace/src/cli/commands/test/validate-credentials.ts:7:40)
    at fix (/project/workspace/src/cli/commands/fix/index.ts:30:52)
    at Object.&lt;anonymous&gt; (/project/workspace/test/jest/unit/lib/commands/fix/fix.spec.ts:91:21)</failure>
    </testcase>
    <testcase classname="snyk fix (functional tests) shows successful fixes Python custom name base.txt project was fixed via --file" name="snyk fix (functional tests) shows successful fixes Python custom name base.txt project was fixed via --file" time="0">
      <failure>MissingApiTokenError: `snyk` requires an authenticated account. Please run `snyk auth` and try again.
    at apiTokenExists (/project/workspace/src/lib/api-token.ts:23:15)
    at validateCredentials (/project/workspace/src/cli/commands/test/validate-credentials.ts:7:40)
    at fix (/project/workspace/src/cli/commands/fix/index.ts:30:52)
    at Object.&lt;anonymous&gt; (/project/workspace/test/jest/unit/lib/commands/fix/fix.spec.ts:131:21)</failure>
    </testcase>
    <testcase classname="snyk fix (functional tests) snyk fix continues to fix when 1 path fails to test with `snyk fix path1 path2` (exit code 0)" name="snyk fix (functional tests) snyk fix continues to fix when 1 path fails to test with `snyk fix path1 path2` (exit code 0)" time="0.001">
      <failure>MissingApiTokenError: `snyk` requires an authenticated account. Please run `snyk auth` and try again.
    at apiTokenExists (/project/workspace/src/lib/api-token.ts:23:15)
    at validateCredentials (/project/workspace/src/cli/commands/test/validate-credentials.ts:7:40)
    at fix (/project/workspace/src/cli/commands/fix/index.ts:30:52)
    at Object.&lt;anonymous&gt; (/project/workspace/test/jest/unit/lib/commands/fix/fix.spec.ts:178:21)</failure>
    </testcase>
    <testcase classname="snyk fix (functional tests) snyk fix send errors as analytics when fix fails" name="snyk fix (functional tests) snyk fix send errors as analytics when fix fails" time="0">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;1&apos;)
    at Object.&lt;anonymous&gt; (/project/workspace/test/jest/unit/lib/commands/fix/fix.spec.ts:267:40)</failure>
    </testcase>
    <testcase classname="snyk fix (functional tests) snyk fails to fix when all paths fails to test with `snyk fix path1 path2` (non 0 error code)" name="snyk fix (functional tests) snyk fails to fix when all paths fails to test with `snyk fix path1 path2` (non 0 error code)" time="0.002">
      <failure>Error: expect(jest.fn()).toHaveBeenCalledTimes(expected)

Expected number of calls: 8
Received number of calls: 0
    at Object.&lt;anonymous&gt; (/project/workspace/test/jest/unit/lib/commands/fix/fix.spec.ts:321:33)</failure>
    </testcase>
    <testcase classname="snyk fix (functional tests) snyk succeeds to fix when no vulns `snyk fix path1` (exit code 0)" name="snyk fix (functional tests) snyk succeeds to fix when no vulns `snyk fix path1` (exit code 0)" time="0">
      <failure>MissingApiTokenError: `snyk` requires an authenticated account. Please run `snyk auth` and try again.
    at apiTokenExists (/project/workspace/src/lib/api-token.ts:23:15)
    at validateCredentials (/project/workspace/src/cli/commands/test/validate-credentials.ts:7:40)
    at fix (/project/workspace/src/cli/commands/fix/index.ts:30:52)
    at Object.&lt;anonymous&gt; (/project/workspace/test/jest/unit/lib/commands/fix/fix.spec.ts:354:21)</failure>
    </testcase>
  </testsuite>
  <testsuite name="extractDataToSendFromResults" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:34" time="0.502" tests="15">
    <testcase classname="extractDataToSendFromResults open source results docker - should not fail due to missing vulns" name="extractDataToSendFromResults open source results docker - should not fail due to missing vulns" time="0.002">
    </testcase>
    <testcase classname="extractDataToSendFromResults open source results should not create any JSON unless it is needed per options" name="extractDataToSendFromResults open source results should not create any JSON unless it is needed per options" time="0.003">
    </testcase>
    <testcase classname="extractDataToSendFromResults open source results should create Snyk JSON and only Snyk JSON if `--json` is set in the options" name="extractDataToSendFromResults open source results should create Snyk JSON and only Snyk JSON if `--json` is set in the options" time="0.001">
    </testcase>
    <testcase classname="extractDataToSendFromResults open source results should create Snyk JSON and only Snyk JSON if `--json-file-output` is set in the options" name="extractDataToSendFromResults open source results should create Snyk JSON and only Snyk JSON if `--json-file-output` is set in the options" time="0.001">
    </testcase>
    <testcase classname="extractDataToSendFromResults open source results should create Snyk JSON and only Snyk JSON if `--json` and `--json-file-output` are set in the options" name="extractDataToSendFromResults open source results should create Snyk JSON and only Snyk JSON if `--json` and `--json-file-output` are set in the options" time="0.001">
    </testcase>
    <testcase classname="extractDataToSendFromResults open source results should create SARIF JSON and only SARIF JSON if `--sarif` is set in the options" name="extractDataToSendFromResults open source results should create SARIF JSON and only SARIF JSON if `--sarif` is set in the options" time="0.003">
    </testcase>
    <testcase classname="extractDataToSendFromResults open source results should create SARIF JSON and only SARIF JSON if `--sarif-file-output` is set in the options" name="extractDataToSendFromResults open source results should create SARIF JSON and only SARIF JSON if `--sarif-file-output` is set in the options" time="0.001">
    </testcase>
    <testcase classname="extractDataToSendFromResults open source results should create SARIF JSON and only SARIF JSON if `--sarif` and `--sarif-file-output` are set in the options" name="extractDataToSendFromResults open source results should create SARIF JSON and only SARIF JSON if `--sarif` and `--sarif-file-output` are set in the options" time="0.001">
    </testcase>
    <testcase classname="extractDataToSendFromResults open source results grouping single project results grouping should create grouped Snyk JSON and only grouped Snyk JSON if `--json` and `--group-issues` is set in the options" name="extractDataToSendFromResults open source results grouping single project results grouping should create grouped Snyk JSON and only grouped Snyk JSON if `--json` and `--group-issues` is set in the options" time="0.017">
    </testcase>
    <testcase classname="extractDataToSendFromResults open source results grouping single project results grouping should create non-grouped Snyk JSON and only Snyk JSON if `--json` is set in the options" name="extractDataToSendFromResults open source results grouping single project results grouping should create non-grouped Snyk JSON and only Snyk JSON if `--json` is set in the options" time="0.012">
    </testcase>
    <testcase classname="extractDataToSendFromResults open source results grouping multiple project results grouping should create grouped Snyk JSON for each of the projects in the result if `--json` and `--group-issues` is set in the options" name="extractDataToSendFromResults open source results grouping multiple project results grouping should create grouped Snyk JSON for each of the projects in the result if `--json` and `--group-issues` is set in the options" time="0.009">
    </testcase>
    <testcase classname="extractDataToSendFromResults open source results grouping multiple project results grouping should create non-grouped Snyk JSON for each of the projects in the result if `--json` is set in the options" name="extractDataToSendFromResults open source results grouping multiple project results grouping should create non-grouped Snyk JSON for each of the projects in the result if `--json` is set in the options" time="0.016">
    </testcase>
    <testcase classname="extractDataToSendFromResults container image json results should create Snyk grouped JSON for container image if `--json` and `--group-issues` are set in the options" name="extractDataToSendFromResults container image json results should create Snyk grouped JSON for container image if `--json` and `--group-issues` are set in the options" time="0.002">
    </testcase>
    <testcase classname="extractDataToSendFromResults container app and os json results should create Snyk grouped JSON for each of the multiple test results if `--json` and `--group-issues` are set in the options" name="extractDataToSendFromResults container app and os json results should create Snyk grouped JSON for each of the multiple test results if `--json` and `--group-issues` are set in the options" time="0.006">
    </testcase>
    <testcase classname="extractDataToSendFromResults container app and os json results should create a non-grouped JSON for each of the test results if `--json` option is set and `--group-issues` is not set" name="extractDataToSendFromResults container app and os json results should create a non-grouped JSON for each of the test results if `--json` option is set and `--group-issues` is not set" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="generateOverallSummary" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:34" time="1.668" tests="17">
    <testcase classname="generateOverallSummary has fixed &amp; failed" name="generateOverallSummary has fixed &amp; failed" time="0.009">
    </testcase>
    <testcase classname="generateOverallSummary has fixed only" name="generateOverallSummary has fixed only" time="0.001">
    </testcase>
    <testcase classname="generateOverallSummary has failed only" name="generateOverallSummary has failed only" time="0">
    </testcase>
    <testcase classname="generateOverallSummary has skipped &amp; failed &amp; plugin errors" name="generateOverallSummary has skipped &amp; failed &amp; plugin errors" time="0">
    </testcase>
    <testcase classname="generateOverallSummary has fixed &amp; failed &amp; not vulnerable" name="generateOverallSummary has fixed &amp; failed &amp; not vulnerable" time="0.001">
    </testcase>
    <testcase classname="generateOverallSummary 100% not vulnerable" name="generateOverallSummary 100% not vulnerable" time="0">
    </testcase>
    <testcase classname="generateSuccessfulFixesSummary has fixed &amp; failed" name="generateSuccessfulFixesSummary has fixed &amp; failed" time="0.001">
    </testcase>
    <testcase classname="generateUnresolvedSummary has failed upgrades &amp; unsupported" name="generateUnresolvedSummary has failed upgrades &amp; unsupported" time="0.001">
    </testcase>
    <testcase classname="generateUnresolvedSummary has f100% ailed upgrades" name="generateUnresolvedSummary has f100% ailed upgrades" time="0.001">
    </testcase>
    <testcase classname="formatIssueCountBySeverity all vuln severities present" name="formatIssueCountBySeverity all vuln severities present" time="0">
    </testcase>
    <testcase classname="formatIssueCountBySeverity all vuln severities absent" name="formatIssueCountBySeverity all vuln severities absent" time="0">
    </testcase>
    <testcase classname="formatIssueCountBySeverity all vuln severities 0" name="formatIssueCountBySeverity all vuln severities 0" time="0">
    </testcase>
    <testcase classname="formatIssueCountBySeverity Critical vulns 0" name="formatIssueCountBySeverity Critical vulns 0" time="0">
    </testcase>
    <testcase classname="showResultsSummary has failed, skipped, successful &amp; plugin errors" name="showResultsSummary has failed, skipped, successful &amp; plugin errors" time="0.001">
    </testcase>
    <testcase classname="showResultsSummary has unresolved only" name="showResultsSummary has unresolved only" time="0.001">
    </testcase>
    <testcase classname="showResultsSummary called with nothing to fix" name="showResultsSummary called with nothing to fix" time="0">
    </testcase>
    <testcase classname="showResultsSummary called with no vulnerable projects to fix" name="showResultsSummary called with no vulnerable projects to fix" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="driftctl integration" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:36" time="0.524" tests="19">
    <testcase classname="driftctl integration describe: default arguments are correct" name="driftctl integration describe: default arguments are correct" time="0.002">
    </testcase>
    <testcase classname="driftctl integration describe: passing options generate correct arguments" name="driftctl integration describe: passing options generate correct arguments" time="0.01">
    </testcase>
    <testcase classname="driftctl integration describe: from arguments is a coma separated list" name="driftctl integration describe: from arguments is a coma separated list" time="0.001">
    </testcase>
    <testcase classname="driftctl integration run driftctl: exit code is translated" name="driftctl integration run driftctl: exit code is translated" time="0.001">
    </testcase>
    <testcase classname="parseDriftAnalysisResults should parse correctly drift analysis" name="parseDriftAnalysisResults should parse correctly drift analysis" time="0">
    </testcase>
    <testcase classname="drift analytics should add most of all drift analytics depending on a given analysis" name="drift analytics should add most of all drift analytics depending on a given analysis" time="0.002">
    </testcase>
    <testcase classname="driftignoreFromPolicy policy undefined" name="driftignoreFromPolicy policy undefined" time="0">
    </testcase>
    <testcase classname="driftignoreFromPolicy policy with no excludes" name="driftignoreFromPolicy policy with no excludes" time="0.001">
    </testcase>
    <testcase classname="driftignoreFromPolicy policy with irrelevant excludes" name="driftignoreFromPolicy policy with irrelevant excludes" time="0">
    </testcase>
    <testcase classname="driftignoreFromPolicy policy with empty drift excludes" name="driftignoreFromPolicy policy with empty drift excludes" time="0.002">
    </testcase>
    <testcase classname="driftignoreFromPolicy policy with one drift exclude" name="driftignoreFromPolicy policy with one drift exclude" time="0">
    </testcase>
    <testcase classname="driftignoreFromPolicy policy with several drift excludes" name="driftignoreFromPolicy policy with several drift excludes" time="0">
    </testcase>
    <testcase classname="updateExcludeInPolicy policy with no excludes" name="updateExcludeInPolicy policy with no excludes" time="0.001">
    </testcase>
    <testcase classname="updateExcludeInPolicy policy with irrelevant excludes" name="updateExcludeInPolicy policy with irrelevant excludes" time="0">
    </testcase>
    <testcase classname="updateExcludeInPolicy policy with empty drift excludes" name="updateExcludeInPolicy policy with empty drift excludes" time="0">
    </testcase>
    <testcase classname="updateExcludeInPolicy policy with several drift excludes" name="updateExcludeInPolicy policy with several drift excludes" time="0.001">
    </testcase>
    <testcase classname="updateExcludeInPolicy with exclude changed option" name="updateExcludeInPolicy with exclude changed option" time="0">
    </testcase>
    <testcase classname="updateExcludeInPolicy with exclude changed option" name="updateExcludeInPolicy with exclude changed option" time="0.001">
    </testcase>
    <testcase classname="Test describe output test output for known analysis" name="Test describe output test output for known analysis" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="snyk test for python project" errors="0" failures="3" skipped="0" timestamp="2024-06-12T20:45:37" time="1.42" tests="3">
    <testcase classname="snyk test for python project no flag is used project contains pyproject.toml file should scan poetry vulnerabilities" name="snyk test for python project no flag is used project contains pyproject.toml file should scan poetry vulnerabilities" time="0.001">
      <failure>MissingApiTokenError: `snyk` requires an authenticated account. Please run `snyk auth` and try again.
    at apiTokenExists (/project/workspace/src/lib/api-token.ts:23:15)
    at validateCredentials (/project/workspace/src/cli/commands/test/validate-credentials.ts:7:40)
    at test (/project/workspace/src/cli/commands/test/index.ts:55:52)
    at Object.&lt;anonymous&gt; (/project/workspace/test/jest/unit/python/snyk-test-pyproject.spec.ts:57:57)
    at Promise.then.completed (/project/workspace/node_modules/jest-circus/build/utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (/project/workspace/node_modules/jest-circus/build/utils.js:231:10)
    at _callCircusTest (/project/workspace/node_modules/jest-circus/build/run.js:316:40)
    at _runTest (/project/workspace/node_modules/jest-circus/build/run.js:252:3)
    at _runTestsForDescribeBlock (/project/workspace/node_modules/jest-circus/build/run.js:126:9)
    at _runTestsForDescribeBlock (/project/workspace/node_modules/jest-circus/build/run.js:121:9)
    at _runTestsForDescribeBlock (/project/workspace/node_modules/jest-circus/build/run.js:121:9)
    at _runTestsForDescribeBlock (/project/workspace/node_modules/jest-circus/build/run.js:121:9)
    at run (/project/workspace/node_modules/jest-circus/build/run.js:71:3)
    at runAndTransformResultsToJestFormat (/project/workspace/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
    at jestAdapter (/project/workspace/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
    at runTestInternal (/project/workspace/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/project/workspace/node_modules/jest-runner/build/runTest.js:444:34)</failure>
    </testcase>
    <testcase classname="snyk test for python project --all-projects flag is used to scan the project project does not contain poetry.lock file should not attempt to scan poetry vulnerabilities" name="snyk test for python project --all-projects flag is used to scan the project project does not contain poetry.lock file should not attempt to scan poetry vulnerabilities" time="0.001">
      <failure>MissingApiTokenError: `snyk` requires an authenticated account. Please run `snyk auth` and try again.
    at apiTokenExists (/project/workspace/src/lib/api-token.ts:23:15)
    at validateCredentials (/project/workspace/src/cli/commands/test/validate-credentials.ts:7:40)
    at test (/project/workspace/src/cli/commands/test/index.ts:55:52)
    at Object.&lt;anonymous&gt; (/project/workspace/test/jest/unit/python/snyk-test-pyproject.spec.ts:130:57)
    at Promise.then.completed (/project/workspace/node_modules/jest-circus/build/utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (/project/workspace/node_modules/jest-circus/build/utils.js:231:10)
    at _callCircusTest (/project/workspace/node_modules/jest-circus/build/run.js:316:40)
    at _runTest (/project/workspace/node_modules/jest-circus/build/run.js:252:3)
    at _runTestsForDescribeBlock (/project/workspace/node_modules/jest-circus/build/run.js:126:9)
    at _runTestsForDescribeBlock (/project/workspace/node_modules/jest-circus/build/run.js:121:9)
    at _runTestsForDescribeBlock (/project/workspace/node_modules/jest-circus/build/run.js:121:9)
    at _runTestsForDescribeBlock (/project/workspace/node_modules/jest-circus/build/run.js:121:9)
    at run (/project/workspace/node_modules/jest-circus/build/run.js:71:3)
    at runAndTransformResultsToJestFormat (/project/workspace/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
    at jestAdapter (/project/workspace/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
    at runTestInternal (/project/workspace/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/project/workspace/node_modules/jest-runner/build/runTest.js:444:34)</failure>
    </testcase>
    <testcase classname="snyk test for python project --all-projects flag is used to scan the project project does contain poetry.lock file should scan poetry vulnerabilities" name="snyk test for python project --all-projects flag is used to scan the project project does contain poetry.lock file should scan poetry vulnerabilities" time="0.001">
      <failure>MissingApiTokenError: `snyk` requires an authenticated account. Please run `snyk auth` and try again.
    at apiTokenExists (/project/workspace/src/lib/api-token.ts:23:15)
    at validateCredentials (/project/workspace/src/cli/commands/test/validate-credentials.ts:7:40)
    at test (/project/workspace/src/cli/commands/test/index.ts:55:52)
    at Object.&lt;anonymous&gt; (/project/workspace/test/jest/unit/python/snyk-test-pyproject.spec.ts:214:57)
    at Promise.then.completed (/project/workspace/node_modules/jest-circus/build/utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (/project/workspace/node_modules/jest-circus/build/utils.js:231:10)
    at _callCircusTest (/project/workspace/node_modules/jest-circus/build/run.js:316:40)
    at _runTest (/project/workspace/node_modules/jest-circus/build/run.js:252:3)
    at _runTestsForDescribeBlock (/project/workspace/node_modules/jest-circus/build/run.js:126:9)
    at _runTestsForDescribeBlock (/project/workspace/node_modules/jest-circus/build/run.js:121:9)
    at _runTestsForDescribeBlock (/project/workspace/node_modules/jest-circus/build/run.js:121:9)
    at _runTestsForDescribeBlock (/project/workspace/node_modules/jest-circus/build/run.js:121:9)
    at run (/project/workspace/node_modules/jest-circus/build/run.js:71:3)
    at runAndTransformResultsToJestFormat (/project/workspace/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
    at jestAdapter (/project/workspace/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
    at runTestInternal (/project/workspace/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/project/workspace/node_modules/jest-runner/build/runTest.js:444:34)</failure>
    </testcase>
  </testsuite>
  <testsuite name="remediation" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:38" time="0.348" tests="12">
    <testcase classname="remediation does not add extra new lines" name="remediation does not add extra new lines" time="0.002">
    </testcase>
    <testcase classname="remediation retains new line at eof" name="remediation retains new line at eof" time="0.001">
    </testcase>
    <testcase classname="remediation does not mess formatting" name="remediation does not mess formatting" time="0">
    </testcase>
    <testcase classname="remediation ignores casing in upgrades (treats all as lowercase)" name="remediation ignores casing in upgrades (treats all as lowercase)" time="0.001">
    </testcase>
    <testcase classname="remediation maintains package name casing when upgrading" name="remediation maintains package name casing when upgrading" time="0">
    </testcase>
    <testcase classname="remediation matches a package with multiple digit versions i.e. 12.123.14" name="remediation matches a package with multiple digit versions i.e. 12.123.14" time="0.001">
    </testcase>
    <testcase classname="remediation maintains comments when upgrading" name="remediation maintains comments when upgrading" time="0">
    </testcase>
    <testcase classname="remediation maintains version comparator when upgrading" name="remediation maintains version comparator when upgrading" time="0.001">
    </testcase>
    <testcase classname="remediation fixes a pip app" name="remediation fixes a pip app" time="0.001">
    </testcase>
    <testcase classname="remediation retains python markers" name="remediation retains python markers" time="0.001">
    </testcase>
    <testcase classname="remediation handles no-op upgrades" name="remediation handles no-op upgrades" time="0">
    </testcase>
    <testcase classname="remediation skips pins if asked" name="remediation skips pins if asked" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Snyk fix" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:39" time="0.7" tests="11">
    <testcase classname="Snyk fix Snyk fix returns results for supported type" name="Snyk fix Snyk fix returns results for supported type" time="0.009">
    </testcase>
    <testcase classname="Snyk fix Snyk fix returns results for supported type in dryRun mode (no write)" name="Snyk fix Snyk fix returns results for supported type in dryRun mode (no write)" time="0.001">
    </testcase>
    <testcase classname="Snyk fix Snyk fix returns results for supported &amp; unsupported type" name="Snyk fix Snyk fix returns results for supported &amp; unsupported type" time="0.002">
    </testcase>
    <testcase classname="Snyk fix Snyk fix returns results as expected" name="Snyk fix Snyk fix returns results as expected" time="0.002">
    </testcase>
    <testcase classname="Snyk fix Snyk fix returns results as expected when 1 fails to fix" name="Snyk fix Snyk fix returns results as expected when 1 fails to fix" time="0.002">
    </testcase>
    <testcase classname="Snyk fix Snyk fix returns results as expected when remediation data is empty" name="Snyk fix Snyk fix returns results as expected when remediation data is empty" time="0.004">
    </testcase>
    <testcase classname="groupEntitiesPerScanType correctly groups related entities per handler type (pip)" name="groupEntitiesPerScanType correctly groups related entities per handler type (pip)" time="0">
    </testcase>
    <testcase classname="groupEntitiesPerScanType correctly groups related entities per handler type (mixed)" name="groupEntitiesPerScanType correctly groups related entities per handler type (mixed)" time="0.001">
    </testcase>
    <testcase classname="groupEntitiesPerScanType correctly groups related entities per handler type with missing type" name="groupEntitiesPerScanType correctly groups related entities per handler type with missing type" time="0">
    </testcase>
    <testcase classname="Error handling Snyk fix returns error when called with unsupported type" name="Error handling Snyk fix returns error when called with unsupported type" time="0.002">
    </testcase>
    <testcase classname="Error handling Snyk fix returns error when manifest can not be parsed" name="Error handling Snyk fix returns error when manifest can not be parsed" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="cli dev count via git log analysis" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:39" time="0.349" tests="9">
    <testcase classname="cli dev count via git log analysis returns contributors" name="cli dev count via git log analysis returns contributors" time="0.061">
    </testcase>
    <testcase classname="cli dev count via git log analysis can calculate start of contributing developer period" name="cli dev count via git log analysis can calculate start of contributing developer period" time="0.001">
    </testcase>
    <testcase classname="cli dev count via git log analysis can parse a git log line" name="cli dev count via git log analysis can parse a git log line" time="0">
    </testcase>
    <testcase classname="cli dev count via git log analysis can handle an empty git log" name="cli dev count via git log analysis can handle an empty git log" time="0">
    </testcase>
    <testcase classname="cli dev count via git log analysis runGitLog returns empty string and does not throw error when git log command fails" name="cli dev count via git log analysis runGitLog returns empty string and does not throw error when git log command fails" time="0">
    </testcase>
    <testcase classname="cli dev count via git log analysis can parse a git log (Linux/OSX line endings)" name="cli dev count via git log analysis can parse a git log (Linux/OSX line endings)" time="0.001">
    </testcase>
    <testcase classname="cli dev count via git log analysis can parse a git log (Windows line endings)" name="cli dev count via git log analysis can parse a git log (Windows line endings)" time="0.003">
    </testcase>
    <testcase classname="cli dev count via git log analysis can separate lines with Linux/OSX line endings" name="cli dev count via git log analysis can separate lines with Linux/OSX line endings" time="0.001">
    </testcase>
    <testcase classname="cli dev count via git log analysis can separate lines Windows line endings" name="cli dev count via git log analysis can separate lines Windows line endings" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getIacDisplayedIssues" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:40" time="0.393" tests="9">
    <testcase classname="getIacDisplayedIssues should include the &apos;Issues&apos; title" name="getIacDisplayedIssues should include the &apos;Issues&apos; title" time="0.028">
    </testcase>
    <testcase classname="getIacDisplayedIssues should include a subtitle for each severity with the correct amount of issues" name="getIacDisplayedIssues should include a subtitle for each severity with the correct amount of issues" time="0.038">
    </testcase>
    <testcase classname="getIacDisplayedIssues should include the correct issues in each severity section, and display the correct issue details" name="getIacDisplayedIssues should include the correct issues in each severity section, and display the correct issue details" time="0.037">
    </testcase>
    <testcase classname="getIacDisplayedIssues should break issue details lines" name="getIacDisplayedIssues should break issue details lines" time="0.002">
    </testcase>
    <testcase classname="getIacDisplayedIssues with no issues should display an appropriate message" name="getIacDisplayedIssues with no issues should display an appropriate message" time="0">
    </testcase>
    <testcase classname="getIacDisplayedIssues with no issues should not display any severity sections" name="getIacDisplayedIssues with no issues should not display any severity sections" time="0.001">
    </testcase>
    <testcase classname="getIacDisplayedIssues with the `shouldShowLineNumbers` option should display line numbers" name="getIacDisplayedIssues with the `shouldShowLineNumbers` option should display line numbers" time="0.021">
    </testcase>
    <testcase classname="getIacDisplayedIssues with the `shouldShowLineNumbers` option when an issue does not have a line number should not display the line number" name="getIacDisplayedIssues with the `shouldShowLineNumbers` option when an issue does not have a line number should not display the line number" time="0.022">
    </testcase>
    <testcase classname="getIacDisplayedIssues with the `shouldShowLineNumbers` option when an issue line number is a non-positive number should not display the line number" name="getIacDisplayedIssues with the `shouldShowLineNumbers` option when an issue line number is a non-positive number should not display the line number" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="resolve and test facts" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:40" time="0.707" tests="4">
    <testcase classname="resolve and test facts failing to resolve and monitor file-signatures fact for c/c++ projects" name="resolve and test facts failing to resolve and monitor file-signatures fact for c/c++ projects" time="0.003">
    </testcase>
    <testcase classname="resolve and test facts failing to resolve and monitor file-signatures fact for c/c++ projects when the job is cancelled" name="resolve and test facts failing to resolve and monitor file-signatures fact for c/c++ projects when the job is cancelled" time="0.002">
    </testcase>
    <testcase classname="resolve and test facts successfully resolves and monitor file-signatures fact for c/c++ projects" name="resolve and test facts successfully resolves and monitor file-signatures fact for c/c++ projects" time="0.002">
    </testcase>
    <testcase classname="resolve and test facts successfully send tags and attributes for c/c++ projects" name="resolve and test facts successfully send tags and attributes for c/c++ projects" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="extractPatchMetadata" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:41" time="1.955" tests="14">
    <testcase classname="extractPatchMetadata extracts a single direct dependency without quotes on package path" name="extractPatchMetadata extracts a single direct dependency without quotes on package path" time="0.002">
    </testcase>
    <testcase classname="extractPatchMetadata extracts a single direct dependency with single quotes on package path" name="extractPatchMetadata extracts a single direct dependency with single quotes on package path" time="0">
    </testcase>
    <testcase classname="extractPatchMetadata extracts a single direct dependency with double quotes on package path" name="extractPatchMetadata extracts a single direct dependency with double quotes on package path" time="0">
    </testcase>
    <testcase classname="extractPatchMetadata extracts a single direct dependency with single quotes on vulnId" name="extractPatchMetadata extracts a single direct dependency with single quotes on vulnId" time="0">
    </testcase>
    <testcase classname="extractPatchMetadata extracts a single direct dependency with double quotes on vulnId" name="extractPatchMetadata extracts a single direct dependency with double quotes on vulnId" time="0.001">
    </testcase>
    <testcase classname="extractPatchMetadata extracts a single direct dependency with carriage returns in line endings" name="extractPatchMetadata extracts a single direct dependency with carriage returns in line endings" time="0">
    </testcase>
    <testcase classname="extractPatchMetadata extracts a transitive dependency without quotes on package path" name="extractPatchMetadata extracts a transitive dependency without quotes on package path" time="0">
    </testcase>
    <testcase classname="extractPatchMetadata extracts a transitive dependency with single quotes on package path" name="extractPatchMetadata extracts a transitive dependency with single quotes on package path" time="0">
    </testcase>
    <testcase classname="extractPatchMetadata extracts a transitive dependency with double quotes on package path" name="extractPatchMetadata extracts a transitive dependency with double quotes on package path" time="0">
    </testcase>
    <testcase classname="extractPatchMetadata extracts multiple transitive dependencies" name="extractPatchMetadata extracts multiple transitive dependencies" time="0">
    </testcase>
    <testcase classname="extractPatchMetadata extracts nothing from an empty patch section" name="extractPatchMetadata extracts nothing from an empty patch section" time="0">
    </testcase>
    <testcase classname="extractPatchMetadata extracts nothing from a missing patch section" name="extractPatchMetadata extracts nothing from a missing patch section" time="0">
    </testcase>
    <testcase classname="extractPatchMetadata throws when there are no package names for a vulnId in the patch section" name="extractPatchMetadata throws when there are no package names for a vulnId in the patch section" time="0.01">
    </testcase>
    <testcase classname="extractPatchMetadata throws when there is more than one package name for a vulnId in the patch section" name="extractPatchMetadata throws when there is more than one package name for a vulnId in the patch section" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="resolve and test facts" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:43" time="0.619" tests="6">
    <testcase classname="resolve and test facts successfully resolving and testing file-signatures fact for c/c++ projects with unmanaged-deps service" name="resolve and test facts successfully resolving and testing file-signatures fact for c/c++ projects with unmanaged-deps service" time="0.006">
    </testcase>
    <testcase classname="resolve and test facts successfully resolving and testing file-signatures fact for c/c++ projects with unmanaged-deps service when org slug is provided" name="resolve and test facts successfully resolving and testing file-signatures fact for c/c++ projects with unmanaged-deps service when org slug is provided" time="0.002">
    </testcase>
    <testcase classname="resolve and test facts successfully resolving and testing file-signatures fact after a retry for c/c++ projects with unmanaged-deps service" name="resolve and test facts successfully resolving and testing file-signatures fact after a retry for c/c++ projects with unmanaged-deps service" time="0.002">
    </testcase>
    <testcase classname="resolve and test facts failed resolving and testing file-signatures since createDepGraph throws exception with unmanaged-deps service" name="resolve and test facts failed resolving and testing file-signatures since createDepGraph throws exception with unmanaged-deps service" time="0.001">
    </testcase>
    <testcase classname="resolve and test facts failed resolving and testing file-signatures since getDepGraph throws exception with unmanaged-deps service" name="resolve and test facts failed resolving and testing file-signatures since getDepGraph throws exception with unmanaged-deps service" time="0">
    </testcase>
    <testcase classname="resolve and test facts failed resolving and testing file-signatures since getIssues throws exception with unmanaged-deps service" name="resolve and test facts failed resolving and testing file-signatures since getIssues throws exception with unmanaged-deps service" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Test snyk code with --report" errors="0" failures="1" skipped="0" timestamp="2024-06-12T20:45:43" time="0.816" tests="8">
    <testcase classname="Test snyk code with --report file-based report flow - analyzeFolders should return the right report results response" name="Test snyk code with --report file-based report flow - analyzeFolders should return the right report results response" time="0.002">
    </testcase>
    <testcase classname="Test snyk code with --report SCM-based report flow - analyzeScmProject should return the right report results response" name="Test snyk code with --report SCM-based report flow - analyzeScmProject should return the right report results response" time="0">
    </testcase>
    <testcase classname="Test snyk code with --report exit codes should exit with correct code (1) when issues are found (including ignored issues)" name="Test snyk code with --report exit codes should exit with correct code (1) when issues are found (including ignored issues)" time="0.001">
    </testcase>
    <testcase classname="Test snyk code with --report exit codes should exit with correct code (0) when only ignored issues are found" name="Test snyk code with --report exit codes should exit with correct code (0) when only ignored issues are found" time="0.001">
      <failure>Error: expect(received).resolves.not.toThrowError()

Received promise rejected instead of resolved
Rejected to value: [MissingApiTokenError: `snyk` requires an authenticated account. Please run `snyk auth` and try again.]
    at expect (/project/workspace/node_modules/expect/build/index.js:113:15)
    at Object.&lt;anonymous&gt; (/project/workspace/test/jest/unit/snyk-code/snyk-code-test-report.spec.ts:147:19)
    at Promise.then.completed (/project/workspace/node_modules/jest-circus/build/utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (/project/workspace/node_modules/jest-circus/build/utils.js:231:10)
    at _callCircusTest (/project/workspace/node_modules/jest-circus/build/run.js:316:40)
    at _runTest (/project/workspace/node_modules/jest-circus/build/run.js:252:3)
    at _runTestsForDescribeBlock (/project/workspace/node_modules/jest-circus/build/run.js:126:9)
    at _runTestsForDescribeBlock (/project/workspace/node_modules/jest-circus/build/run.js:121:9)
    at _runTestsForDescribeBlock (/project/workspace/node_modules/jest-circus/build/run.js:121:9)
    at run (/project/workspace/node_modules/jest-circus/build/run.js:71:3)
    at runAndTransformResultsToJestFormat (/project/workspace/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
    at jestAdapter (/project/workspace/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
    at runTestInternal (/project/workspace/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/project/workspace/node_modules/jest-runner/build/runTest.js:444:34)</failure>
    </testcase>
    <testcase classname="Test snyk code with --report error handling when code-client fails, throw customized message for disabled FF" name="Test snyk code with --report error handling when code-client fails, throw customized message for disabled FF" time="0.001">
    </testcase>
    <testcase classname="Test snyk code with --report error handling when code-client fails, throw customized message for SARIF too large" name="Test snyk code with --report error handling when code-client fails, throw customized message for SARIF too large" time="0">
    </testcase>
    <testcase classname="Test snyk code with --report error handling when code-client fails, throw customized message for analysis failed" name="Test snyk code with --report error handling when code-client fails, throw customized message for analysis failed" time="0.001">
    </testcase>
    <testcase classname="Test snyk code with --report error handling when code-client fails, throw customized message for bad gateway" name="Test snyk code with --report error handling when code-client fails, throw customized message for bad gateway" time="0">
    </testcase>
  </testsuite>
  <testsuite name="display help message" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:44" time="0.279" tests="15">
    <testcase classname="display help message should do nothing when it is missing command" name="display help message should do nothing when it is missing command" time="0.002">
    </testcase>
    <testcase classname="display help message should change the command to help with help=&quot;container&quot;" name="display help message should change the command to help with help=&quot;container&quot;" time="0.001">
    </testcase>
    <testcase classname="display help message command &quot;container --help&quot; should change the command to help with help=&quot;container&quot;" name="display help message command &quot;container --help&quot; should change the command to help with help=&quot;container&quot;" time="0">
    </testcase>
    <testcase classname="display help message command &quot;container test --help&quot; should change the command to help with help=&quot;container&quot;" name="display help message command &quot;container test --help&quot; should change the command to help with help=&quot;container&quot;" time="0.001">
    </testcase>
    <testcase classname="when is not a valid mode should do nothing" name="when is not a valid mode should do nothing" time="0">
    </testcase>
    <testcase classname="when have a valid mode and command &quot;container test&quot; should set docker option and test command" name="when have a valid mode and command &quot;container test&quot; should set docker option and test command" time="0.001">
    </testcase>
    <testcase classname="when have a valid mode and command &quot;unmanaged test&quot; should set unmanaged option and test command" name="when have a valid mode and command &quot;unmanaged test&quot; should set unmanaged option and test command" time="0">
    </testcase>
    <testcase classname="when have a valid mode and command &quot;unmanaged monitor&quot; should set unmanaged option and monitor command" name="when have a valid mode and command &quot;unmanaged monitor&quot; should set unmanaged option and monitor command" time="0.001">
    </testcase>
    <testcase classname="when have a valid mode, command and exists a command alias &quot;container test&quot; should set docker option and test command" name="when have a valid mode, command and exists a command alias &quot;container test&quot; should set docker option and test command" time="0.005">
    </testcase>
    <testcase classname="when have a valid mode and not allowed command &quot;container protect&quot; should not set docker option and return same command" name="when have a valid mode and not allowed command &quot;container protect&quot; should not set docker option and return same command" time="0">
    </testcase>
    <testcase classname="mode validation when there is no command, throw error" name="mode validation when there is no command, throw error" time="0.001">
    </testcase>
    <testcase classname="mode validation when command is not valid, throw error" name="mode validation when command is not valid, throw error" time="0">
    </testcase>
    <testcase classname="mode validation when command is valid, do nothing" name="mode validation when command is valid, do nothing" time="0.001">
    </testcase>
    <testcase classname="mode validation when there is no valid mode, do nothing" name="mode validation when there is no valid mode, do nothing" time="0">
    </testcase>
    <testcase classname="mode validation when there is no mode, do nothing" name="mode validation when there is no mode, do nothing" time="0">
    </testcase>
  </testsuite>
  <testsuite name="parseFiles" errors="0" failures="1" skipped="0" timestamp="2024-06-12T20:45:45" time="0.883" tests="13">
    <testcase classname="parseFiles parses multiple iac files as expected, skipping unrecognised schemas" name="parseFiles parses multiple iac files as expected, skipping unrecognised schemas" time="0.136">
    </testcase>
    <testcase classname="parseFiles does not throw an error if a file parse failed in a directory scan" name="parseFiles does not throw an error if a file parse failed in a directory scan" time="0.006">
    </testcase>
    <testcase classname="parseFiles includes unsupported file types in failed files" name="parseFiles includes unsupported file types in failed files" time="0.001">
    </testcase>
    <testcase classname="parseFiles throws an error for invalid JSON file types" name="parseFiles throws an error for invalid JSON file types" time="0.002">
    </testcase>
    <testcase classname="parseFiles throws an error for invalid (syntax) YAML file types" name="parseFiles throws an error for invalid (syntax) YAML file types" time="0.002">
    </testcase>
    <testcase classname="parseFiles returns both parsed and failed files" name="parseFiles returns both parsed and failed files" time="0.006">
    </testcase>
    <testcase classname="parseFiles returns emptywhen no recognised config types are found" name="parseFiles returns emptywhen no recognised config types are found" time="0.001">
    </testcase>
    <testcase classname="parseFiles given an $fileStub with one of the errors to skip, it returns $expectedParsingResult" name="parseFiles given an $fileStub with one of the errors to skip, it returns $expectedParsingResult" time="0.001">
    </testcase>
    <testcase classname="parseFiles given an $fileStub with one of the errors to skip, it returns $expectedParsingResult" name="parseFiles given an $fileStub with one of the errors to skip, it returns $expectedParsingResult" time="0.004">
      <failure>Error: expect(received).toEqual(expected) // deep equality

Expected: {&quot;docId&quot;: 0, &quot;engineType&quot;: 2, &quot;fileContent&quot;: &quot;
Resources:
 Denied:
   Type: \&quot;AWS::IAM::Role\&quot;
   Properties:
     AssumeRolePolicyDocument: {
 \&quot;Version\&quot;: \&quot;2012-10-17\&quot;,
 \&quot;Statement\&quot;: [
   {
     \&quot;Action\&quot;: \&quot;sts:AssumeRole\&quot;,
     \&quot;Principal\&quot;: {
       \&quot;AWS\&quot;: \&quot;arn:aws:iam::123456789012:root\&quot;
     },
     \&quot;Effect\&quot;: \&quot;Allow\&quot;,
     \&quot;Sid\&quot;: \&quot;\&quot;
   }
 ]
}
&quot;, &quot;filePath&quot;: &quot;dont-care&quot;, &quot;fileType&quot;: &quot;yml&quot;, &quot;jsonContent&quot;: {&quot;Resources&quot;: {&quot;Denied&quot;: {&quot;Properties&quot;: {&quot;AssumeRolePolicyDocument&quot;: {&quot;Statement&quot;: [{&quot;Action&quot;: &quot;sts:AssumeRole&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: {&quot;AWS&quot;: &quot;arn:aws:iam::123456789012:root&quot;}, &quot;Sid&quot;: &quot;&quot;}], &quot;Version&quot;: &quot;2012-10-17&quot;}}, &quot;Type&quot;: &quot;AWS::IAM::Role&quot;}}}, &quot;projectType&quot;: &quot;cloudformationconfig&quot;}
Received: undefined
    at /project/workspace/test/jest/unit/iac/file-parser.spec.ts:154:30</failure>
    </testcase>
    <testcase classname="parseTerraformFiles parses multiple Terraform files as expected" name="parseTerraformFiles parses multiple Terraform files as expected" time="0.034">
    </testcase>
    <testcase classname="parseTerraformFiles parses empty Terraform files" name="parseTerraformFiles parses empty Terraform files" time="0.002">
    </testcase>
    <testcase classname="parseTerraformFiles returns both parsed and failed files" name="parseTerraformFiles returns both parsed and failed files" time="0.075">
    </testcase>
    <testcase classname="parseTerraformFiles returns if a file parse failed in a file scan" name="parseTerraformFiles returns if a file parse failed in a file scan" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Scoop Detection" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:45" time="0.195" tests="22">
    <testcase classname="Scoop Detection detects if snyk is installed via scoop" name="Scoop Detection detects if snyk is installed via scoop" time="0.001">
    </testcase>
    <testcase classname="Scoop Detection validates scoop manifest file" name="Scoop Detection validates scoop manifest file" time="0.001">
    </testcase>
    <testcase classname="Homebrew Detection detects if snyk is installed via Homebrew" name="Homebrew Detection detects if snyk is installed via Homebrew" time="0.001">
    </testcase>
    <testcase classname="Homebrew Detection returns false if formula not in Homebrew path" name="Homebrew Detection returns false if formula not in Homebrew path" time="0">
    </testcase>
    <testcase classname="Homebrew Detection returns false if formula files does not exist" name="Homebrew Detection returns false if formula files does not exist" time="0">
    </testcase>
    <testcase classname="Homebrew Detection validates Homebrew formula file exists" name="Homebrew Detection validates Homebrew formula file exists" time="0.001">
    </testcase>
    <testcase classname="getIntegrationName returns empty integration name by default" name="getIntegrationName returns empty integration name by default" time="0">
    </testcase>
    <testcase classname="getIntegrationName loads integration name from envvar" name="getIntegrationName loads integration name from envvar" time="0">
    </testcase>
    <testcase classname="getIntegrationName returns empty integration namewhen envvar is not recognized" name="getIntegrationName returns empty integration namewhen envvar is not recognized" time="0.001">
    </testcase>
    <testcase classname="getIntegrationName loads and formats integration name from CLI flag" name="getIntegrationName loads and formats integration name from CLI flag" time="0">
    </testcase>
    <testcase classname="getIntegrationName loads and validates integration name from CLI flag" name="getIntegrationName loads and validates integration name from CLI flag" time="0">
    </testcase>
    <testcase classname="getIntegrationName returns integration name SCOOP when snyk is installed with scoop" name="getIntegrationName returns integration name SCOOP when snyk is installed with scoop" time="0">
    </testcase>
    <testcase classname="getIntegrationName returns integration name HOMEBREW when snyk is installed with Homebrew" name="getIntegrationName returns integration name HOMEBREW when snyk is installed with Homebrew" time="0">
    </testcase>
    <testcase classname="getIntegrationVersion returns empty integration version by default" name="getIntegrationVersion returns empty integration version by default" time="0">
    </testcase>
    <testcase classname="getIntegrationVersion loads integration version from envvar" name="getIntegrationVersion loads integration version from envvar" time="0">
    </testcase>
    <testcase classname="getIntegrationVersion loads integration version from CLI flag" name="getIntegrationVersion loads integration version from CLI flag" time="0.002">
    </testcase>
    <testcase classname="getIntegrationEnvironment returns empty integration environment by default" name="getIntegrationEnvironment returns empty integration environment by default" time="0.001">
    </testcase>
    <testcase classname="getIntegrationEnvironment loads integration environment from envvar" name="getIntegrationEnvironment loads integration environment from envvar" time="0">
    </testcase>
    <testcase classname="getIntegrationEnvironment loads integration environment from CLI flag" name="getIntegrationEnvironment loads integration environment from CLI flag" time="0">
    </testcase>
    <testcase classname="getIntegrationEnvironmentVersion returns empty integration environment version by default" name="getIntegrationEnvironmentVersion returns empty integration environment version by default" time="0.001">
    </testcase>
    <testcase classname="getIntegrationEnvironmentVersion loads integration environment version from envvar" name="getIntegrationEnvironmentVersion loads integration environment version from envvar" time="0">
    </testcase>
    <testcase classname="getIntegrationEnvironmentVersion loads integration environment version from CLI flag" name="getIntegrationEnvironmentVersion loads integration environment version from CLI flag" time="0">
    </testcase>
  </testsuite>
  <testsuite name="buildMeta" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:46" time="0.165" tests="35">
    <testcase classname="buildMeta current directory is a repository with a URL should return a valid meta" name="buildMeta current directory is a repository with a URL should return a valid meta" time="0.001">
    </testcase>
    <testcase classname="buildMeta current directory is a repository with a URL should respect the repository URL override" name="buildMeta current directory is a repository with a URL should respect the repository URL override" time="0.001">
    </testcase>
    <testcase classname="buildMeta current directory is a repository without a URL should return a valid meta" name="buildMeta current directory is a repository without a URL should return a valid meta" time="0">
    </testcase>
    <testcase classname="buildMeta current directory is a repository without a URL should respect the repository URL override" name="buildMeta current directory is a repository without a URL should respect the repository URL override" time="0">
    </testcase>
    <testcase classname="buildMeta current directory is not a repository should return a valid meta" name="buildMeta current directory is not a repository should return a valid meta" time="0.001">
    </testcase>
    <testcase classname="buildMeta current directory is not a repository should respect the repository URL override" name="buildMeta current directory is not a repository should respect the repository URL override" time="0">
    </testcase>
    <testcase classname="buildMeta current directory is not a repository should respect the target-name override over the remote-repo-url for the project name" name="buildMeta current directory is not a repository should respect the target-name override over the remote-repo-url for the project name" time="0">
    </testcase>
    <testcase classname="buildMeta parent directory is a repository with a URL should return a valid meta" name="buildMeta parent directory is a repository with a URL should return a valid meta" time="0">
    </testcase>
    <testcase classname="buildMeta parent directory is a repository with a URL should respect the repository URL override" name="buildMeta parent directory is a repository with a URL should respect the repository URL override" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse ssh://user@host.xz:1234/user/repo.git/" name="getProjectNameFromGitUrl should parse ssh://user@host.xz:1234/user/repo.git/" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse ssh://host.xz:1234/user/repo.git/" name="getProjectNameFromGitUrl should parse ssh://host.xz:1234/user/repo.git/" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse ssh://user@host.xz/user/repo.git/" name="getProjectNameFromGitUrl should parse ssh://user@host.xz/user/repo.git/" time="0.001">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse ssh://host.xz/user/repo.git/" name="getProjectNameFromGitUrl should parse ssh://host.xz/user/repo.git/" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse ssh://user@host.xz:1234/user/repo.git" name="getProjectNameFromGitUrl should parse ssh://user@host.xz:1234/user/repo.git" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse ssh://host.xz:1234/user/repo.git" name="getProjectNameFromGitUrl should parse ssh://host.xz:1234/user/repo.git" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse ssh://user@host.xz/user/repo.git" name="getProjectNameFromGitUrl should parse ssh://user@host.xz/user/repo.git" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse ssh://host.xz/user/repo.git" name="getProjectNameFromGitUrl should parse ssh://host.xz/user/repo.git" time="0.001">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse git://host.xz:1234/user/repo.git/" name="getProjectNameFromGitUrl should parse git://host.xz:1234/user/repo.git/" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse git://host.xz/user/repo.git/" name="getProjectNameFromGitUrl should parse git://host.xz/user/repo.git/" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse git://host.xz:1234/user/repo.git" name="getProjectNameFromGitUrl should parse git://host.xz:1234/user/repo.git" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse git://host.xz/user/repo.git" name="getProjectNameFromGitUrl should parse git://host.xz/user/repo.git" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse http://host.xz:1234/user/repo.git/" name="getProjectNameFromGitUrl should parse http://host.xz:1234/user/repo.git/" time="0.001">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse http://host.xz/user/repo.git/" name="getProjectNameFromGitUrl should parse http://host.xz/user/repo.git/" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse http://host.xz:1234/user/repo.git" name="getProjectNameFromGitUrl should parse http://host.xz:1234/user/repo.git" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse http://host.xz/user/repo.git" name="getProjectNameFromGitUrl should parse http://host.xz/user/repo.git" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse https://host.xz:1234/user/repo.git/" name="getProjectNameFromGitUrl should parse https://host.xz:1234/user/repo.git/" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse https://host.xz/user/repo.git/" name="getProjectNameFromGitUrl should parse https://host.xz/user/repo.git/" time="0.001">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse https://host.xz:1234/user/repo.git" name="getProjectNameFromGitUrl should parse https://host.xz:1234/user/repo.git" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse https://host.xz/user/repo.git" name="getProjectNameFromGitUrl should parse https://host.xz/user/repo.git" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse git@github.com:user/repo.git" name="getProjectNameFromGitUrl should parse git@github.com:user/repo.git" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse https://github.com/user/repo" name="getProjectNameFromGitUrl should parse https://github.com/user/repo" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse http://github.com/user/repo" name="getProjectNameFromGitUrl should parse http://github.com/user/repo" time="0.001">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse user/repo" name="getProjectNameFromGitUrl should parse user/repo" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse  user/repo" name="getProjectNameFromGitUrl should parse  user/repo" time="0">
    </testcase>
    <testcase classname="getProjectNameFromGitUrl should parse user/repo " name="getProjectNameFromGitUrl should parse user/repo " time="0">
    </testcase>
  </testsuite>
  <testsuite name="fetchPatches" errors="0" failures="0" skipped="1" timestamp="2024-06-12T20:45:46" time="3.056" tests="8">
    <testcase classname="fetchPatches can fetch patches for valid request params" name="fetchPatches can fetch patches for valid request params" time="0.407">
    </testcase>
    <testcase classname="fetchPatches throws when version not valid semver" name="fetchPatches throws when version not valid semver" time="0.296">
    </testcase>
    <testcase classname="fetchPatches throws when vulnId is not found" name="fetchPatches throws when vulnId is not found" time="0.328">
    </testcase>
    <testcase classname="fetchPatches returns empty array when no patches found for vuln/version" name="fetchPatches returns empty array when no patches found for vuln/version" time="0.472">
    </testcase>
    <testcase classname="getAllPatches works for normal scenario" name="getAllPatches works for normal scenario" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getAllPatches works when no patches available" name="getAllPatches works when no patches available" time="0.296">
    </testcase>
    <testcase classname="getAllPatches throws when a vulnId is not found" name="getAllPatches throws when a vulnId is not found" time="0.475">
    </testcase>
    <testcase classname="getAllPatches works when for vuln that has multiple applicable patches and more than one diff per patch" name="getAllPatches works when for vuln that has multiple applicable patches and more than one diff per patch" time="0.591">
    </testcase>
  </testsuite>
  <testsuite name="scanFiles" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:49" time="0.46" tests="6">
    <testcase classname="scanFiles with parsed files returns the expected violated policies" name="scanFiles with parsed files returns the expected violated policies" time="0.053">
    </testcase>
    <testcase classname="scanFiles missing policy engine wasm files throws an error" name="scanFiles missing policy engine wasm files throws an error" time="0.01">
    </testcase>
    <testcase classname="validateResultFromCustomRules does not filter out valid policies" name="validateResultFromCustomRules does not filter out valid policies" time="0.001">
    </testcase>
    <testcase classname="validateResultFromCustomRules filters out policies with invalid severity" name="validateResultFromCustomRules filters out policies with invalid severity" time="0">
    </testcase>
    <testcase classname="validateResultFromCustomRules filters out policies with lowercase publicId" name="validateResultFromCustomRules filters out policies with lowercase publicId" time="0.001">
    </testcase>
    <testcase classname="validateResultFromCustomRules filters out policies with conflicting publicId" name="validateResultFromCustomRules filters out policies with conflicting publicId" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getAllDirectoriesForPath" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:49" time="0.378" tests="22">
    <testcase classname="getAllDirectoriesForPath single file path with a single .tf file" name="getAllDirectoriesForPath single file path with a single .tf file" time="0.003">
    </testcase>
    <testcase classname="getAllDirectoriesForPath single file path with a single .tfvars file returns an array with a single file" name="getAllDirectoriesForPath single file path with a single .tfvars file returns an array with a single file" time="0">
    </testcase>
    <testcase classname="getAllDirectoriesForPath single file path with a single .tfvars file can handle single dot relative paths successfully" name="getAllDirectoriesForPath single file path with a single .tfvars file can handle single dot relative paths successfully" time="0.001">
    </testcase>
    <testcase classname="getAllDirectoriesForPath errors returns an empty array if single file scan and the file is not IaC" name="getAllDirectoriesForPath errors returns an empty array if single file scan and the file is not IaC" time="0.001">
    </testcase>
    <testcase classname="getAllDirectoriesForPath errors throws an error when an error occurs when loading files" name="getAllDirectoriesForPath errors throws an error when an error occurs when loading files" time="0.01">
    </testcase>
    <testcase classname="getAllDirectoriesForPath directory paths with just IaC files and 0 nested directories returns itself" name="getAllDirectoriesForPath directory paths with just IaC files and 0 nested directories returns itself" time="0.002">
    </testcase>
    <testcase classname="getAllDirectoriesForPath with multiple directories returns the non empty directories" name="getAllDirectoriesForPath with multiple directories returns the non empty directories" time="0.001">
    </testcase>
    <testcase classname="getAllDirectoriesForPath with multiple directories with nested files inside multiple-level directories with 1 directory with 2 directories returns the files at level 2" name="getAllDirectoriesForPath with multiple directories with nested files inside multiple-level directories with 1 directory with 2 directories returns the files at level 2" time="0.001">
    </testcase>
    <testcase classname="getAllDirectoriesForPath with multiple directories with nested files inside multiple-level directories with 1 directory with detection depth 1 returns the files at level 1" name="getAllDirectoriesForPath with multiple directories with nested files inside multiple-level directories with 1 directory with detection depth 1 returns the files at level 1" time="0">
    </testcase>
    <testcase classname="getAllDirectoriesForPath getTerraformFilesInDirectoryGenerator ignores specific filetypes" name="getAllDirectoriesForPath getTerraformFilesInDirectoryGenerator ignores specific filetypes" time="0.001">
    </testcase>
    <testcase classname="getAllDirectoriesForPath getTerraformFilesInDirectoryGenerator gets filepaths for the specific directory only" name="getAllDirectoriesForPath getTerraformFilesInDirectoryGenerator gets filepaths for the specific directory only" time="0.001">
    </testcase>
    <testcase classname="shouldBeParsed given &quot;dir/file1.tf&quot; filepath, returns true for shouldBeParsed" name="shouldBeParsed given &quot;dir/file1.tf&quot; filepath, returns true for shouldBeParsed" time="0">
    </testcase>
    <testcase classname="shouldBeParsed given &quot;dir/file2.yaml&quot; filepath, returns true for shouldBeParsed" name="shouldBeParsed given &quot;dir/file2.yaml&quot; filepath, returns true for shouldBeParsed" time="0">
    </testcase>
    <testcase classname="shouldBeParsed given &quot;dir/.&quot; filepath, returns false for shouldBeParsed" name="shouldBeParsed given &quot;dir/.&quot; filepath, returns false for shouldBeParsed" time="0.001">
    </testcase>
    <testcase classname="shouldBeParsed given &quot;dir/..&quot; filepath, returns false for shouldBeParsed" name="shouldBeParsed given &quot;dir/..&quot; filepath, returns false for shouldBeParsed" time="0">
    </testcase>
    <testcase classname="shouldBeParsed given &quot;dir/.DS_Store&quot; filepath, returns false for shouldBeParsed" name="shouldBeParsed given &quot;dir/.DS_Store&quot; filepath, returns false for shouldBeParsed" time="0">
    </testcase>
    <testcase classname="shouldBeParsed given &quot;dir/#&quot; filepath, returns false for shouldBeParsed" name="shouldBeParsed given &quot;dir/#&quot; filepath, returns false for shouldBeParsed" time="0">
    </testcase>
    <testcase classname="shouldBeParsed given &quot;dir/#swap#&quot; filepath, returns false for shouldBeParsed" name="shouldBeParsed given &quot;dir/#swap#&quot; filepath, returns false for shouldBeParsed" time="0">
    </testcase>
    <testcase classname="shouldBeParsed given &quot;dir/~&quot; filepath, returns false for shouldBeParsed" name="shouldBeParsed given &quot;dir/~&quot; filepath, returns false for shouldBeParsed" time="0.001">
    </testcase>
    <testcase classname="shouldBeParsed given &quot;dir/~something&quot; filepath, returns false for shouldBeParsed" name="shouldBeParsed given &quot;dir/~something&quot; filepath, returns false for shouldBeParsed" time="0">
    </testcase>
    <testcase classname="shouldBeParsed given &quot;dir/file.tfvars&quot; filepath, returns true for shouldBeParsed" name="shouldBeParsed given &quot;dir/file.tfvars&quot; filepath, returns true for shouldBeParsed" time="0">
    </testcase>
    <testcase classname="shouldBeParsed given &quot;dir/file.auto.tfvars&quot; filepath, returns true for shouldBeParsed" name="shouldBeParsed given &quot;dir/file.auto.tfvars&quot; filepath, returns true for shouldBeParsed" time="0">
    </testcase>
  </testsuite>
  <testsuite name="createSarifOutputForContainers" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:50" time="0.206" tests="3">
    <testcase classname="createSarifOutputForContainers general with high severity issue" name="createSarifOutputForContainers general with high severity issue" time="0.006">
    </testcase>
    <testcase classname="createSarifOutputForContainers general with critical severity issue without CVE" name="createSarifOutputForContainers general with critical severity issue without CVE" time="0.002">
    </testcase>
    <testcase classname="createSarifOutputForContainers general with critical severity issue without CWE" name="createSarifOutputForContainers general with critical severity issue without CWE" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="generateUpgrades" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:50" time="0.75" tests="5">
    <testcase classname="generateUpgrades returns empty if no upgrades could be generated" name="generateUpgrades returns empty if no upgrades could be generated" time="0.035">
    </testcase>
    <testcase classname="generateUpgrades returns dev upgrades as expected with tested with --dev" name="generateUpgrades returns dev upgrades as expected with tested with --dev" time="0.013">
    </testcase>
    <testcase classname="generateUpgrades returns production upgrades only" name="generateUpgrades returns production upgrades only" time="0.01">
    </testcase>
    <testcase classname="generateUpgrades adds transitive upgrades to production upgrades" name="generateUpgrades adds transitive upgrades to production upgrades" time="0.009">
    </testcase>
    <testcase classname="generateUpgrades correctly generated production, dev &amp; transitive upgrades" name="generateUpgrades correctly generated production, dev &amp; transitive upgrades" time="0.07">
    </testcase>
  </testsuite>
  <testsuite name="filterIgnoredIssues fn" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:51" time="0.359" tests="6">
    <testcase classname="filterIgnoredIssues fn should filter the not-expired ignored issues" name="filterIgnoredIssues fn should filter the not-expired ignored issues" time="0.001">
    </testcase>
    <testcase classname="filterIgnoredIssues fn should not filter the expired ignored issues" name="filterIgnoredIssues fn should not filter the expired ignored issues" time="0">
    </testcase>
    <testcase classname="filterIgnoredIssues fn should handle empty issue array" name="filterIgnoredIssues fn should handle empty issue array" time="0">
    </testcase>
    <testcase classname="filterIgnoredIssues fn should handle empty issues data object" name="filterIgnoredIssues fn should handle empty issues data object" time="0">
    </testcase>
    <testcase classname="filterIgnoredIssues fn should handle undefined policy file" name="filterIgnoredIssues fn should handle undefined policy file" time="0">
    </testcase>
    <testcase classname="filterIgnoredIssues fn should handle empty policy file" name="filterIgnoredIssues fn should handle empty policy file" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="CLI Share Results" errors="0" failures="1" skipped="0" timestamp="2024-06-12T20:45:51" time="0.524" tests="5">
    <testcase classname="CLI Share Results converts the results to Envelope&apos;s ScanResult interface - without .snyk policies" name="CLI Share Results converts the results to Envelope&apos;s ScanResult interface - without .snyk policies" time="0.02">
    </testcase>
    <testcase classname="CLI Share Results converts the results to Envelope&apos;s ScanResult interface - with .snyk policies" name="CLI Share Results converts the results to Envelope&apos;s ScanResult interface - with .snyk policies" time="0.023">
      <failure>Error: expect(received).toEqual(expected) // deep equality

- Expected  - 1
+ Received  + 2

@@ -56,18 +56,19 @@
      &quot;targetFile&quot;: &quot;file.yaml&quot;,
      &quot;type&quot;: &quot;k8sconfig&quot;,
    },
    &quot;name&quot;: &quot;projectA&quot;,
    &quot;policy&quot;: &quot;# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.
- version: v1.25.0
+ version: v1.25.1
  # ignores vulnerabilities until expiry date; change duration by modifying expiry date
  ignore:
    SNYK-CC-TF-4:
      - &apos;*&apos;:
          reason: IGNORE ALL THE THINGS!
  patch: {}
  &quot;,
    &quot;target&quot;: Object {
+     &quot;name&quot;: undefined,
      &quot;remoteUrl&quot;: &quot;http://github.com/snyk/cli.git&quot;,
    },
    &quot;targetReference&quot;: undefined,
  }
    at Object.&lt;anonymous&gt; (/project/workspace/test/jest/unit/iac/cli-share-results.spec.ts:87:35)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)</failure>
    </testcase>
    <testcase classname="CLI Share Results when given a target reference should include it in the Envelope&apos;s ScanResult interface" name="CLI Share Results when given a target reference should include it in the Envelope&apos;s ScanResult interface" time="0.018">
    </testcase>
    <testcase classname="CLI Share Results forwards value to iac-cli-share-results endpoint" name="CLI Share Results forwards value to iac-cli-share-results endpoint" time="0.016">
    </testcase>
    <testcase classname="CLI Share Results respects the org flag provided" name="CLI Share Results respects the org flag provided" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="filtering ignored issues" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:52" time="0.22" tests="10">
    <testcase classname="filtering ignored issues returns the original issues when policy is not loaded" name="filtering ignored issues returns the original issues when policy is not loaded" time="0.005">
    </testcase>
    <testcase classname="filtering ignored issues filters ignored issues when path=*" name="filtering ignored issues filters ignored issues when path=*" time="0.004">
    </testcase>
    <testcase classname="filtering ignored issues filtering ignored issues by resource path filters ignored issues when path is resource path (Kubernetes)" name="filtering ignored issues filtering ignored issues by resource path filters ignored issues when path is resource path (Kubernetes)" time="0.003">
    </testcase>
    <testcase classname="filtering ignored issues filtering ignored issues by resource path filters ignored issues when path is resource path (CloudFormation)" name="filtering ignored issues filtering ignored issues by resource path filters ignored issues when path is resource path (CloudFormation)" time="0.004">
    </testcase>
    <testcase classname="filtering ignored issues filtering ignored issues by resource path filters ignored issues when path is resource path (Terraform)" name="filtering ignored issues filtering ignored issues by resource path filters ignored issues when path is resource path (Terraform)" time="0.003">
    </testcase>
    <testcase classname="filtering ignored issues filters no issues when path is non-matching resource path" name="filtering ignored issues filters no issues when path is non-matching resource path" time="0.011">
    </testcase>
    <testcase classname="filtering ignored issues filters ignored issues when path is file path" name="filtering ignored issues filters ignored issues when path is file path" time="0.008">
    </testcase>
    <testcase classname="filtering ignored issues filters no issues when path is file path in the wrong directory" name="filtering ignored issues filters no issues when path is file path in the wrong directory" time="0.003">
    </testcase>
    <testcase classname="filtering ignored issues filters no issues when path is non-matching file path" name="filtering ignored issues filters no issues when path is non-matching file path" time="0.004">
    </testcase>
    <testcase classname="filtering ignored issues filters no issues when path is non-matching file path but matching resource path" name="filtering ignored issues filters no issues when path is non-matching file path but matching resource path" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="hasFixableIssues" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:52" time="0.099" tests="6">
    <testcase classname="hasFixableIssues has patchable" name="hasFixableIssues has patchable" time="0.001">
    </testcase>
    <testcase classname="hasFixableIssues has upgrades" name="hasFixableIssues has upgrades" time="0">
    </testcase>
    <testcase classname="hasFixableIssues has pins" name="hasFixableIssues has pins" time="0">
    </testcase>
    <testcase classname="hasFixableIssues has upgrades, patchable" name="hasFixableIssues has upgrades, patchable" time="0.001">
    </testcase>
    <testcase classname="hasFixableIssues multiple issues with fixes" name="hasFixableIssues multiple issues with fixes" time="0">
    </testcase>
    <testcase classname="hasFixableIssues has no fixable" name="hasFixableIssues has no fixable" time="0">
    </testcase>
  </testsuite>
  <testsuite name="CLI config - API URL" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:52" time="0.19" tests="52">
    <testcase classname="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://snyk.io/api/v1 without the v1 suffix" name="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://snyk.io/api/v1 without the v1 suffix" time="0.001">
    </testcase>
    <testcase classname="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://snyk.io/api without the v1 suffix" name="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://snyk.io/api without the v1 suffix" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://app.snyk.io/api without the v1 suffix" name="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://app.snyk.io/api without the v1 suffix" time="0.001">
    </testcase>
    <testcase classname="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://app.snyk.io/api/v1 without the v1 suffix" name="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://app.snyk.io/api/v1 without the v1 suffix" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://api.snyk.io/v1 without the v1 suffix" name="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://api.snyk.io/v1 without the v1 suffix" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://api.snyk.io without the v1 suffix" name="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://api.snyk.io without the v1 suffix" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://api.snyk.io/ without the v1 suffix" name="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://api.snyk.io/ without the v1 suffix" time="0.001">
    </testcase>
    <testcase classname="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://api.custom.snyk.io without the v1 suffix" name="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://api.custom.snyk.io without the v1 suffix" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL http://localhost:9000/ without the v1 suffix" name="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL http://localhost:9000/ without the v1 suffix" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL http://localhost:9000/api/v1 without the v1 suffix" name="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL http://localhost:9000/api/v1 without the v1 suffix" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL http://alpha:omega@localhost:9000 without the v1 suffix" name="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL http://alpha:omega@localhost:9000 without the v1 suffix" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://app.dev.snyk.io/api/v1 without the v1 suffix" name="CLI config - API URL getBaseApiUrl when only default URL is defined returns default API URL https://app.dev.snyk.io/api/v1 without the v1 suffix" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getBaseApiUrl returns envvar API if it is defined and valid" name="CLI config - API URL getBaseApiUrl returns envvar API if it is defined and valid" time="0.001">
    </testcase>
    <testcase classname="CLI config - API URL getBaseApiUrl returns default API if envvar is defined but not valid" name="CLI config - API URL getBaseApiUrl returns default API if envvar is defined but not valid" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getBaseApiUrl returns config API if it is defined and valid" name="CLI config - API URL getBaseApiUrl returns config API if it is defined and valid" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getBaseApiUrl returns default API if config endpoint is defined but not valid" name="CLI config - API URL getBaseApiUrl returns default API if config endpoint is defined but not valid" time="0.001">
    </testcase>
    <testcase classname="CLI config - API URL getV1ApiUrl returns V1 API URL https://snyk.io/api/ with v1 path" name="CLI config - API URL getV1ApiUrl returns V1 API URL https://snyk.io/api/ with v1 path" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getV1ApiUrl returns V1 API URL https://snyk.io/api with v1 path" name="CLI config - API URL getV1ApiUrl returns V1 API URL https://snyk.io/api with v1 path" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getV1ApiUrl returns V1 API URL https://app.snyk.io/api with v1 path" name="CLI config - API URL getV1ApiUrl returns V1 API URL https://app.snyk.io/api with v1 path" time="0.001">
    </testcase>
    <testcase classname="CLI config - API URL getV1ApiUrl returns V1 API URL https://app.snyk.io/api/ with v1 path" name="CLI config - API URL getV1ApiUrl returns V1 API URL https://app.snyk.io/api/ with v1 path" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getV1ApiUrl returns V1 API URL https://api.snyk.io/ with v1 path" name="CLI config - API URL getV1ApiUrl returns V1 API URL https://api.snyk.io/ with v1 path" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getV1ApiUrl returns V1 API URL https://api.snyk.io with v1 path" name="CLI config - API URL getV1ApiUrl returns V1 API URL https://api.snyk.io with v1 path" time="0.008">
    </testcase>
    <testcase classname="CLI config - API URL getV1ApiUrl returns V1 API URL https://api.snyk.io/ with v1 path" name="CLI config - API URL getV1ApiUrl returns V1 API URL https://api.snyk.io/ with v1 path" time="0.001">
    </testcase>
    <testcase classname="CLI config - API URL getV1ApiUrl returns V1 API URL https://api.custom.snyk.io with v1 path" name="CLI config - API URL getV1ApiUrl returns V1 API URL https://api.custom.snyk.io with v1 path" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getV1ApiUrl returns V1 API URL http://localhost:9000/ with v1 path" name="CLI config - API URL getV1ApiUrl returns V1 API URL http://localhost:9000/ with v1 path" time="0.001">
    </testcase>
    <testcase classname="CLI config - API URL getV1ApiUrl returns V1 API URL http://localhost:9000/api/ with v1 path" name="CLI config - API URL getV1ApiUrl returns V1 API URL http://localhost:9000/api/ with v1 path" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getV1ApiUrl returns V1 API URL http://alpha:omega@localhost:9000 with v1 path" name="CLI config - API URL getV1ApiUrl returns V1 API URL http://alpha:omega@localhost:9000 with v1 path" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getV1ApiUrl returns V1 API URL https://app.dev.snyk.io/api/ with v1 path" name="CLI config - API URL getV1ApiUrl returns V1 API URL https://app.dev.snyk.io/api/ with v1 path" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getRestApiUrl returns REST API URL https://snyk.io/api/" name="CLI config - API URL getRestApiUrl returns REST API URL https://snyk.io/api/" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getRestApiUrl returns REST API URL https://snyk.io/api" name="CLI config - API URL getRestApiUrl returns REST API URL https://snyk.io/api" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getRestApiUrl returns REST API URL https://app.snyk.io/api" name="CLI config - API URL getRestApiUrl returns REST API URL https://app.snyk.io/api" time="0.002">
    </testcase>
    <testcase classname="CLI config - API URL getRestApiUrl returns REST API URL https://app.snyk.io/api/" name="CLI config - API URL getRestApiUrl returns REST API URL https://app.snyk.io/api/" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getRestApiUrl returns REST API URL https://api.snyk.io/" name="CLI config - API URL getRestApiUrl returns REST API URL https://api.snyk.io/" time="0.001">
    </testcase>
    <testcase classname="CLI config - API URL getRestApiUrl returns REST API URL https://api.snyk.io" name="CLI config - API URL getRestApiUrl returns REST API URL https://api.snyk.io" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getRestApiUrl returns REST API URL https://api.snyk.io/" name="CLI config - API URL getRestApiUrl returns REST API URL https://api.snyk.io/" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getRestApiUrl returns REST API URL https://api.custom.snyk.io" name="CLI config - API URL getRestApiUrl returns REST API URL https://api.custom.snyk.io" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getRestApiUrl returns REST API URL http://localhost:9000/" name="CLI config - API URL getRestApiUrl returns REST API URL http://localhost:9000/" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getRestApiUrl returns REST API URL http://localhost:9000/api/" name="CLI config - API URL getRestApiUrl returns REST API URL http://localhost:9000/api/" time="0.001">
    </testcase>
    <testcase classname="CLI config - API URL getRestApiUrl returns REST API URL http://alpha:omega@localhost:9000" name="CLI config - API URL getRestApiUrl returns REST API URL http://alpha:omega@localhost:9000" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getRestApiUrl returns REST API URL https://app.dev.snyk.io/api/" name="CLI config - API URL getRestApiUrl returns REST API URL https://app.dev.snyk.io/api/" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getRootUrl returns ROOT URL https://snyk.io/api/v1" name="CLI config - API URL getRootUrl returns ROOT URL https://snyk.io/api/v1" time="0.001">
    </testcase>
    <testcase classname="CLI config - API URL getRootUrl returns ROOT URL https://snyk.io/api" name="CLI config - API URL getRootUrl returns ROOT URL https://snyk.io/api" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getRootUrl returns ROOT URL https://app.snyk.io/api" name="CLI config - API URL getRootUrl returns ROOT URL https://app.snyk.io/api" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getRootUrl returns ROOT URL https://app.snyk.io/api/v1" name="CLI config - API URL getRootUrl returns ROOT URL https://app.snyk.io/api/v1" time="0.001">
    </testcase>
    <testcase classname="CLI config - API URL getRootUrl returns ROOT URL https://api.snyk.io/v1" name="CLI config - API URL getRootUrl returns ROOT URL https://api.snyk.io/v1" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getRootUrl returns ROOT URL https://api.snyk.io" name="CLI config - API URL getRootUrl returns ROOT URL https://api.snyk.io" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getRootUrl returns ROOT URL https://api.snyk.io/" name="CLI config - API URL getRootUrl returns ROOT URL https://api.snyk.io/" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getRootUrl returns ROOT URL https://api.custom.snyk.io" name="CLI config - API URL getRootUrl returns ROOT URL https://api.custom.snyk.io" time="0.001">
    </testcase>
    <testcase classname="CLI config - API URL getRootUrl returns ROOT URL http://localhost:9000/" name="CLI config - API URL getRootUrl returns ROOT URL http://localhost:9000/" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getRootUrl returns ROOT URL http://localhost:9000/api/v1" name="CLI config - API URL getRootUrl returns ROOT URL http://localhost:9000/api/v1" time="0">
    </testcase>
    <testcase classname="CLI config - API URL getRootUrl returns ROOT URL http://alpha:omega@localhost:9000" name="CLI config - API URL getRootUrl returns ROOT URL http://alpha:omega@localhost:9000" time="0.001">
    </testcase>
    <testcase classname="CLI config - API URL getRootUrl returns ROOT URL https://app.dev.snyk.io/api/v1" name="CLI config - API URL getRootUrl returns ROOT URL https://app.dev.snyk.io/api/v1" time="0">
    </testcase>
  </testsuite>
  <testsuite name="cli-monitor-utils test" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:52" time="0.193" tests="11">
    <testcase classname="cli-monitor-utils test getNameDepTree returns name from scanned project if container" name="cli-monitor-utils test getNameDepTree returns name from scanned project if container" time="0.001">
    </testcase>
    <testcase classname="cli-monitor-utils test getNameDepTree returns name from depTree if not container" name="cli-monitor-utils test getNameDepTree returns name from depTree if not container" time="0">
    </testcase>
    <testcase classname="cli-monitor-utils test getNameDepGraph returns name from scanned project if container" name="cli-monitor-utils test getNameDepGraph returns name from scanned project if container" time="0.024">
    </testcase>
    <testcase classname="cli-monitor-utils test getNameDepGraph returns name from depGraph if not container" name="cli-monitor-utils test getNameDepGraph returns name from depGraph if not container" time="0">
    </testcase>
    <testcase classname="cli-monitor-utils test getProjectName returns name from scanned project if container" name="cli-monitor-utils test getProjectName returns name from scanned project if container" time="0">
    </testcase>
    <testcase classname="cli-monitor-utils test getProjectName returns name from meta if not container" name="cli-monitor-utils test getProjectName returns name from meta if not container" time="0">
    </testcase>
    <testcase classname="cli-monitor-utils test getProjectName returns gradle project name from scanned project meta" name="cli-monitor-utils test getProjectName returns gradle project name from scanned project meta" time="0">
    </testcase>
    <testcase classname="cli-monitor-utils test getProjectName returns project name from scanned project meta when project-name is provided via option" name="cli-monitor-utils test getProjectName returns project name from scanned project meta when project-name is provided via option" time="0">
    </testcase>
    <testcase classname="cli-monitor-utils test getProjectName returns project name when project-name is provided via option" name="cli-monitor-utils test getProjectName returns project name when project-name is provided via option" time="0">
    </testcase>
    <testcase classname="cli-monitor-utils test getTargetFile returns name from scanned project if container" name="cli-monitor-utils test getTargetFile returns name from scanned project if container" time="0">
    </testcase>
    <testcase classname="cli-monitor-utils test getTargetFile returns name from plugin meta if not container" name="cli-monitor-utils test getTargetFile returns name from plugin meta if not container" time="0">
    </testcase>
  </testsuite>
  <testsuite name="formatIssuesWithRemediation" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:53" time="0.428" tests="6">
    <testcase classname="formatIssuesWithRemediation with pins &amp; unfixable &amp; showVulnsPaths = all" name="formatIssuesWithRemediation with pins &amp; unfixable &amp; showVulnsPaths = all" time="0.004">
    </testcase>
    <testcase classname="formatIssuesWithRemediation with showVulnPaths = some" name="formatIssuesWithRemediation with showVulnPaths = some" time="0.001">
    </testcase>
    <testcase classname="formatIssuesWithRemediation with upgrades &amp; patches" name="formatIssuesWithRemediation with upgrades &amp; patches" time="0.001">
    </testcase>
    <testcase classname="formatIssuesWithRemediation with license issues" name="formatIssuesWithRemediation with license issues" time="0.004">
    </testcase>
    <testcase classname="formatIssuesWithRemediation includes severity change reason" name="formatIssuesWithRemediation includes severity change reason" time="0.001">
    </testcase>
    <testcase classname="formatIssuesWithRemediation includes user note and reason when available" name="formatIssuesWithRemediation includes user note and reason when available" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="formatScanResults" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:53" time="0.593" tests="12">
    <testcase classname="formatScanResults given {&quot;formatOptions&quot;: [Object], &quot;generateOptions&quot;: [Object]} options object, returns the expected results" name="formatScanResults given {&quot;formatOptions&quot;: [Object], &quot;generateOptions&quot;: [Object]} options object, returns the expected results" time="0.003">
    </testcase>
    <testcase classname="formatScanResults given {&quot;formatOptions&quot;: [Object], &quot;generateOptions&quot;: [Object]} options object, returns the expected results" name="formatScanResults given {&quot;formatOptions&quot;: [Object], &quot;generateOptions&quot;: [Object]} options object, returns the expected results" time="0.001">
    </testcase>
    <testcase classname="formatScanResults given {&quot;formatOptions&quot;: [Object], &quot;generateOptions&quot;: [Object]} options object, returns the expected results" name="formatScanResults given {&quot;formatOptions&quot;: [Object], &quot;generateOptions&quot;: [Object]} options object, returns the expected results" time="0.001">
    </testcase>
    <testcase classname="formatScanResults given {&quot;formatOptions&quot;: [Object], &quot;generateOptions&quot;: [Object]} options object, returns the expected results" name="formatScanResults given {&quot;formatOptions&quot;: [Object], &quot;generateOptions&quot;: [Object]} options object, returns the expected results" time="0.001">
    </testcase>
    <testcase classname="formatScanResults given {&quot;formatOptions&quot;: [Object], &quot;generateOptions&quot;: [Object]} options object, returns the expected results" name="formatScanResults given {&quot;formatOptions&quot;: [Object], &quot;generateOptions&quot;: [Object]} options object, returns the expected results" time="0.001">
    </testcase>
    <testcase classname="formatScanResults given {&quot;formatOptions&quot;: [Object], &quot;generateOptions&quot;: [Object]} options object, returns the expected results" name="formatScanResults given {&quot;formatOptions&quot;: [Object], &quot;generateOptions&quot;: [Object]} options object, returns the expected results" time="0.002">
    </testcase>
    <testcase classname="parser failures should return -1 for lineNumber creates a valid tree, but the getLineNumber() fails" name="parser failures should return -1 for lineNumber creates a valid tree, but the getLineNumber() fails" time="0.001">
    </testcase>
    <testcase classname="parser failures should return -1 for lineNumber sends an invalid tree and getLineNumber() fails" name="parser failures should return -1 for lineNumber sends an invalid tree and getLineNumber() fails" time="0.001">
    </testcase>
    <testcase classname="filterPoliciesBySeverity returns the formatted results filtered by severity - no default threshold" name="filterPoliciesBySeverity returns the formatted results filtered by severity - no default threshold" time="0.001">
    </testcase>
    <testcase classname="filterPoliciesBySeverity returns the formatted results filtered by severity - medium threshold, equal to severity" name="filterPoliciesBySeverity returns the formatted results filtered by severity - medium threshold, equal to severity" time="0">
    </testcase>
    <testcase classname="filterPoliciesBySeverity returns no results if violatedPolicy severity is under threshold" name="filterPoliciesBySeverity returns no results if violatedPolicy severity is under threshold" time="0">
    </testcase>
    <testcase classname="filterPoliciesBySeverity returns no results if violatedPolicy severity is now set to none" name="filterPoliciesBySeverity returns no results if violatedPolicy severity is now set to none" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packageJsonBelongsToWorkspace" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:54" time="0.346" tests="9">
    <testcase classname="packageJsonBelongsToWorkspace does not match workspace root" name="packageJsonBelongsToWorkspace does not match workspace root" time="0.003">
    </testcase>
    <testcase classname="packageJsonBelongsToWorkspace correctly matches a workspace with /* globs (meaning all folders)" name="packageJsonBelongsToWorkspace correctly matches a workspace with /* globs (meaning all folders)" time="0.001">
    </testcase>
    <testcase classname="packageJsonBelongsToWorkspace correctly matches a workspace with /*/** globs" name="packageJsonBelongsToWorkspace correctly matches a workspace with /*/** globs" time="0">
    </testcase>
    <testcase classname="packageJsonBelongsToWorkspace does not match a workspace outside declared globs" name="packageJsonBelongsToWorkspace does not match a workspace outside declared globs" time="0.001">
    </testcase>
    <testcase classname="packageJsonBelongsToWorkspace Windows does not match workspace root" name="packageJsonBelongsToWorkspace Windows does not match workspace root" time="0">
    </testcase>
    <testcase classname="packageJsonBelongsToWorkspace Windows correctly matches a workspace with /* globs (meaning all folders)" name="packageJsonBelongsToWorkspace Windows correctly matches a workspace with /* globs (meaning all folders)" time="0.001">
    </testcase>
    <testcase classname="packageJsonBelongsToWorkspace Windows correctly matches a workspace with \* globs (meaning all folders)" name="packageJsonBelongsToWorkspace Windows correctly matches a workspace with \* globs (meaning all folders)" time="0.001">
    </testcase>
    <testcase classname="packageJsonBelongsToWorkspace Windows correctly matches a workspace with /*/** globs" name="packageJsonBelongsToWorkspace Windows correctly matches a workspace with /*/** globs" time="0.001">
    </testcase>
    <testcase classname="packageJsonBelongsToWorkspace Windows does not match a workspace outside declared globs" name="packageJsonBelongsToWorkspace Windows does not match a workspace outside declared globs" time="0">
    </testcase>
  </testsuite>
  <testsuite name="extractOCIRegistryURLComponents" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:54" time="1.274" tests="11">
    <testcase classname="extractOCIRegistryURLComponents extracts baseURL, repo and tag from an OCI URL" name="extractOCIRegistryURLComponents extracts baseURL, repo and tag from an OCI URL" time="0.002">
    </testcase>
    <testcase classname="extractOCIRegistryURLComponents extracts components from URL without protocol" name="extractOCIRegistryURLComponents extracts components from URL without protocol" time="0.001">
    </testcase>
    <testcase classname="extractOCIRegistryURLComponents extracts components and a versioned tag" name="extractOCIRegistryURLComponents extracts components and a versioned tag" time="0.001">
    </testcase>
    <testcase classname="extractOCIRegistryURLComponents extracts components when no account provided" name="extractOCIRegistryURLComponents extracts components when no account provided" time="0">
    </testcase>
    <testcase classname="extractOCIRegistryURLComponents extracts components and a latest tag, when tag is undefined" name="extractOCIRegistryURLComponents extracts components and a latest tag, when tag is undefined" time="0.001">
    </testcase>
    <testcase classname="extractOCIRegistryURLComponents throws an error if a URL with an empty registry host is provided" name="extractOCIRegistryURLComponents throws an error if a URL with an empty registry host is provided" time="0.003">
    </testcase>
    <testcase classname="extractOCIRegistryURLComponents throws an error if a URL without a path is provided" name="extractOCIRegistryURLComponents throws an error if a URL without a path is provided" time="0.001">
    </testcase>
    <testcase classname="extractOCIRegistryURLComponents throws an error if a URL with an empty path is provided" name="extractOCIRegistryURLComponents throws an error if a URL with an empty path is provided" time="0.016">
    </testcase>
    <testcase classname="extractOCIRegistryURLComponents throws an error if a URL with an empty repository name is provided" name="extractOCIRegistryURLComponents throws an error if a URL with an empty repository name is provided" time="0.002">
    </testcase>
    <testcase classname="pull pulls successfully" name="pull pulls successfully" time="0.002">
    </testcase>
    <testcase classname="pull fails to pull with a FailedToBuildOCIArtifactError" name="pull fails to pull with a FailedToBuildOCIArtifactError" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="downloadPolicyEngine" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:55" time="0.66" tests="5">
    <testcase classname="downloadPolicyEngine fetches the Policy Engine executable" name="downloadPolicyEngine fetches the Policy Engine executable" time="0.001">
    </testcase>
    <testcase classname="downloadPolicyEngine caches the fetched cache resource" name="downloadPolicyEngine caches the fetched cache resource" time="0.001">
    </testcase>
    <testcase classname="downloadPolicyEngine when the Policy Engine executable fails to be fetched throws an error" name="downloadPolicyEngine when the Policy Engine executable fails to be fetched throws an error" time="0.007">
    </testcase>
    <testcase classname="downloadPolicyEngine when the Policy engine executable has an invalid checksum throws an error" name="downloadPolicyEngine when the Policy engine executable has an invalid checksum throws an error" time="0.001">
    </testcase>
    <testcase classname="downloadPolicyEngine when the Policy Engine executable fails to be cached throws an error" name="downloadPolicyEngine when the Policy Engine executable fails to be cached throws an error" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="filterOutProcessedYarnWorkspaces" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:56" time="0.43" tests="5">
    <testcase classname="filterOutProcessedYarnWorkspaces all package.json belong to the same workspace" name="filterOutProcessedYarnWorkspaces all package.json belong to the same workspace" time="0.001">
    </testcase>
    <testcase classname="filterOutProcessedYarnWorkspaces all package.json belong to the multiple workspace" name="filterOutProcessedYarnWorkspaces all package.json belong to the multiple workspace" time="0">
    </testcase>
    <testcase classname="filterOutProcessedYarnWorkspaces 1 package.json (yarn) does not belong to a workspace" name="filterOutProcessedYarnWorkspaces 1 package.json (yarn) does not belong to a workspace" time="0">
    </testcase>
    <testcase classname="filterOutProcessedYarnWorkspaces 1 package.json (npm) does not belong to a workspace" name="filterOutProcessedYarnWorkspaces 1 package.json (npm) does not belong to a workspace" time="0">
    </testcase>
    <testcase classname="filterOutProcessedYarnWorkspaces multiple mixed files do not belong to a workspace" name="filterOutProcessedYarnWorkspaces multiple mixed files do not belong to a workspace" time="0">
    </testcase>
  </testsuite>
  <testsuite name="createSarifOutputForIac" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:56" time="0.293" tests="6">
    <testcase classname="createSarifOutputForIac treats a high severity issue as an error" name="createSarifOutputForIac treats a high severity issue as an error" time="0.012">
    </testcase>
    <testcase classname="createSarifOutputForIac treats a critical severity issue as an error" name="createSarifOutputForIac treats a critical severity issue as an error" time="0.011">
    </testcase>
    <testcase classname="createSarifOutputForIac includes an artifactLocation and region" name="createSarifOutputForIac includes an artifactLocation and region" time="0.01">
    </testcase>
    <testcase classname="createSarifOutputForIac excludes the region if no line number was found" name="createSarifOutputForIac excludes the region if no line number was found" time="0.008">
    </testcase>
    <testcase classname="createSarifOutputForIac excludes the region if no line number is present" name="createSarifOutputForIac excludes the region if no line number is present" time="0.007">
    </testcase>
    <testcase classname="createSarifOutputForIac uses the base path if git not present" name="createSarifOutputForIac uses the base path if git not present" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="SyntheticMetricInstance" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:57" time="0.204" tests="8">
    <testcase classname="SyntheticMetricInstance has a correct initial value" name="SyntheticMetricInstance has a correct initial value" time="0.001">
    </testcase>
    <testcase classname="SyntheticMetricInstance can be manually set" name="SyntheticMetricInstance can be manually set" time="0">
    </testcase>
    <testcase classname="TimerMetricInstance has a correct initial value" name="TimerMetricInstance has a correct initial value" time="0">
    </testcase>
    <testcase classname="TimerMetricInstance can time things with sufficient accuracy" name="TimerMetricInstance can time things with sufficient accuracy" time="0.012">
    </testcase>
    <testcase classname="TimerMetricInstance .start() / .stop() logs start/top and improper use warnings if you try to start/stop it again after stopping it" name="TimerMetricInstance .start() / .stop() logs start/top and improper use warnings if you try to start/stop it again after stopping it" time="0.005">
    </testcase>
    <testcase classname="MetricsCollector can get values and compute total on timer through MetricsCollector" name="MetricsCollector can get values and compute total on timer through MetricsCollector" time="0.001">
    </testcase>
    <testcase classname="MetricsCollector can set and get cpu time through MetricsCollector" name="MetricsCollector can set and get cpu time through MetricsCollector" time="0">
    </testcase>
    <testcase classname="MetricsCollector returns all metrics in the way we need for analytics" name="MetricsCollector returns all metrics in the way we need for analytics" time="0">
    </testcase>
  </testsuite>
  <testsuite name="initLocalCache - downloads bundle successfully" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:57" time="0.33" tests="5">
    <testcase classname="initLocalCache - downloads bundle successfully downloads and extracts the bundle successfully" name="initLocalCache - downloads bundle successfully downloads and extracts the bundle successfully" time="0.001">
    </testcase>
    <testcase classname="initLocalCache - downloads bundle successfully extracts the custom rules successfully if valid" name="initLocalCache - downloads bundle successfully extracts the custom rules successfully if valid" time="0">
    </testcase>
    <testcase classname="initLocalCache - downloads bundle successfully fails to extract the custom rules if invalid" name="initLocalCache - downloads bundle successfully fails to extract the custom rules if invalid" time="0.01">
    </testcase>
    <testcase classname="initLocalCache - downloads bundle successfully cleans up the custom folder after finishes" name="initLocalCache - downloads bundle successfully cleans up the custom folder after finishes" time="0.002">
    </testcase>
    <testcase classname="initLocalCache - errors throws an error on creation of cache dir" name="initLocalCache - errors throws an error on creation of cache dir" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="displayResult" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:57" time="0.404" tests="8">
    <testcase classname="displayResult Docker test result" name="displayResult Docker test result" time="0.004">
    </testcase>
    <testcase classname="displayResult Docker test result no file path and base image auto detected" name="displayResult Docker test result no file path and base image auto detected" time="0.001">
    </testcase>
    <testcase classname="displayResult Docker test result with base image non resolvable warning" name="displayResult Docker test result with base image non resolvable warning" time="0.001">
    </testcase>
    <testcase classname="displayResult Docker test result with base image name not found warning" name="displayResult Docker test result with base image name not found warning" time="0.001">
    </testcase>
    <testcase classname="displayResult Docker test result with remediation advice" name="displayResult Docker test result with remediation advice" time="0.001">
    </testcase>
    <testcase classname="displayResult Pip result with pins" name="displayResult Pip result with pins" time="0.002">
    </testcase>
    <testcase classname="displayResult with license issues" name="displayResult with license issues" time="0.002">
    </testcase>
    <testcase classname="displayResult with Upgrades &amp; Patches" name="displayResult with Upgrades &amp; Patches" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getPackageJsonPathsContainingSnykDependency" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:58" time="0.145" tests="9">
    <testcase classname="getPackageJsonPathsContainingSnykDependency with --file option used returns empty array when the given path does end with `package.json` or `package-lock.json`" name="getPackageJsonPathsContainingSnykDependency with --file option used returns empty array when the given path does end with `package.json` or `package-lock.json`" time="0.001">
    </testcase>
    <testcase classname="getPackageJsonPathsContainingSnykDependency with --file option used returns empty array when the given path ends with `package.json` but the file does not actually exit" name="getPackageJsonPathsContainingSnykDependency with --file option used returns empty array when the given path ends with `package.json` but the file does not actually exit" time="0">
    </testcase>
    <testcase classname="getPackageJsonPathsContainingSnykDependency with --file option used returns empty array when the given path ends with `package-lock.json` but the file does not actually exit" name="getPackageJsonPathsContainingSnykDependency with --file option used returns empty array when the given path ends with `package-lock.json` but the file does not actually exit" time="0.001">
    </testcase>
    <testcase classname="getPackageJsonPathsContainingSnykDependency with --file option used returns an array with a path to a package.json if the file passed exists and contains the `snyk` dependency" name="getPackageJsonPathsContainingSnykDependency with --file option used returns an array with a path to a package.json if the file passed exists and contains the `snyk` dependency" time="0">
    </testcase>
    <testcase classname="getPackageJsonPathsContainingSnykDependency no --file option used returns empty list when no paths are passed" name="getPackageJsonPathsContainingSnykDependency no --file option used returns empty list when no paths are passed" time="0">
    </testcase>
    <testcase classname="getPackageJsonPathsContainingSnykDependency no --file option used single path passed returns an empty array if no package.json is found in the given directory path" name="getPackageJsonPathsContainingSnykDependency no --file option used single path passed returns an empty array if no package.json is found in the given directory path" time="0.001">
    </testcase>
    <testcase classname="getPackageJsonPathsContainingSnykDependency no --file option used single path passed returns an empty array if no package.json is found in the given directory path" name="getPackageJsonPathsContainingSnykDependency no --file option used single path passed returns an empty array if no package.json is found in the given directory path" time="0">
    </testcase>
    <testcase classname="getPackageJsonPathsContainingSnykDependency no --file option used single path passed returns a path to a package.json if one is found in the given directory path" name="getPackageJsonPathsContainingSnykDependency no --file option used single path passed returns a path to a package.json if one is found in the given directory path" time="0">
    </testcase>
    <testcase classname="getPackageJsonPathsContainingSnykDependency no --file option used with multiple paths passed returns an array containing only those paths which have `package.json` with the `snyk` dep" name="getPackageJsonPathsContainingSnykDependency no --file option used with multiple paths passed returns an array containing only those paths which have `package.json` with the `snyk` dep" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="lookupLocal" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:58" time="0.508" tests="6">
    <testcase classname="lookupLocal when a user configured path for a rules bundle is not provided when the Rules Bundle was cached returns the path to the cached Rules Bundle" name="lookupLocal when a user configured path for a rules bundle is not provided when the Rules Bundle was cached returns the path to the cached Rules Bundle" time="0.004">
    </testcase>
    <testcase classname="lookupLocal when a user configured path for a rules bundle is not provided when the Rules Bundle was not cached returns no path" name="lookupLocal when a user configured path for a rules bundle is not provided when the Rules Bundle was not cached returns no path" time="0.002">
    </testcase>
    <testcase classname="lookupLocal when a user configured path for a rules bundle is provided when the user configured path points to a valid Rules Bundle returns the user configured path" name="lookupLocal when a user configured path for a rules bundle is provided when the user configured path points to a valid Rules Bundle returns the user configured path" time="0.001">
    </testcase>
    <testcase classname="lookupLocal when a user configured path for a rules bundle is provided when the user configured path does not point to a valid Rules Bundle throws an error" name="lookupLocal when a user configured path for a rules bundle is provided when the user configured path does not point to a valid Rules Bundle throws an error" time="0.014">
    </testcase>
    <testcase classname="fetchCacheResource fetches the cache resource" name="fetchCacheResource fetches the cache resource" time="0.006">
    </testcase>
    <testcase classname="fetchCacheResource when the request fails to be sent throws an error" name="fetchCacheResource when the request fails to be sent throws an error" time="0.033">
    </testcase>
  </testsuite>
  <testsuite name="initPolicyEngine" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:58" time="0.913" tests="5">
    <testcase classname="initPolicyEngine looks up the Policy Engine executable locally" name="initPolicyEngine looks up the Policy Engine executable locally" time="0.001">
    </testcase>
    <testcase classname="initPolicyEngine when a valid local Policy Engine executable is found returns the local Policy Engine executable path" name="initPolicyEngine when a valid local Policy Engine executable is found returns the local Policy Engine executable path" time="0.001">
    </testcase>
    <testcase classname="initPolicyEngine when a valid local Policy Engine executable is found does not download the Policy Engine executable" name="initPolicyEngine when a valid local Policy Engine executable is found does not download the Policy Engine executable" time="0">
    </testcase>
    <testcase classname="initPolicyEngine when no valid local Policy Engine executable is found downloads the Policy Engine executable" name="initPolicyEngine when no valid local Policy Engine executable is found downloads the Policy Engine executable" time="0.001">
    </testcase>
    <testcase classname="initPolicyEngine when no valid local Policy Engine executable is found returns the path to the downloaded Policy Engine executable" name="initPolicyEngine when no valid local Policy Engine executable is found returns the path to the downloaded Policy Engine executable" time="0">
    </testcase>
  </testsuite>
  <testsuite name="test()" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:45:59" time="0.782" tests="1">
    <testcase classname="test() parsing returns the unparsable files excluding content" name="test() parsing returns the unparsable files excluding content" time="0.086">
    </testcase>
  </testsuite>
  <testsuite name="initLocalCache" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:00" time="0.27" tests="5">
    <testcase classname="initLocalCache creates the IaC cache directory if it does not exist" name="initLocalCache creates the IaC cache directory if it does not exist" time="0.001">
    </testcase>
    <testcase classname="initLocalCache initializes the Policy Engine executable" name="initLocalCache initializes the Policy Engine executable" time="0.001">
    </testcase>
    <testcase classname="initLocalCache returns the cached resource paths" name="initLocalCache returns the cached resource paths" time="0">
    </testcase>
    <testcase classname="initLocalCache when the initialization for the cache directory fails throws an error" name="initLocalCache when the initialization for the cache directory fails throws an error" time="0.005">
    </testcase>
    <testcase classname="initLocalCache when the initialization for the Policy Engine executable fails throws an error" name="initLocalCache when the initialization for the Policy Engine executable fails throws an error" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="formatErrorMonitorOutput" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:00" time="0.445" tests="8">
    <testcase classname="formatErrorMonitorOutput maven monitor error" name="formatErrorMonitorOutput maven monitor error" time="0.002">
    </testcase>
    <testcase classname="formatErrorMonitorOutput maven monitor error with --json" name="formatErrorMonitorOutput maven monitor error with --json" time="0.001">
    </testcase>
    <testcase classname="formatErrorMonitorOutput npm with project name" name="formatErrorMonitorOutput npm with project name" time="0">
    </testcase>
    <testcase classname="formatMonitorOutput gradle scan with --all-sub-projects" name="formatMonitorOutput gradle scan with --all-sub-projects" time="0.001">
    </testcase>
    <testcase classname="formatMonitorOutput gradle scan without --all-sub-projects" name="formatMonitorOutput gradle scan without --all-sub-projects" time="0">
    </testcase>
    <testcase classname="formatMonitorOutput docker" name="formatMonitorOutput docker" time="0">
    </testcase>
    <testcase classname="formatMonitorOutput npm without --all-projects (more projects were detected)" name="formatMonitorOutput npm without --all-projects (more projects were detected)" time="0">
    </testcase>
    <testcase classname="formatMonitorOutput npm with --all-projects (more projects were detected)" name="formatMonitorOutput npm with --all-projects (more projects were detected)" time="0">
    </testcase>
    <testcase classname="formatMonitorOutput --json" name="formatMonitorOutput --json" time="0">
    </testcase>
  </testsuite>
  <testsuite name="monitorEcosystem docker/container" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:01" time="0.906" tests="1">
    <testcase classname="monitorEcosystem docker/container should return successful monitorResults from monitorEcosystem" name="monitorEcosystem docker/container should return successful monitorResults from monitorEcosystem" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Retrieving sarif result" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:02" time="1.846" tests="4">
    <testcase classname="Retrieving sarif result should return the path given there is no target file present" name="Retrieving sarif result should return the path given there is no target file present" time="0.002">
    </testcase>
    <testcase classname="Retrieving sarif result should return the path without colon characters given there is no target file present and the path contains a tag" name="Retrieving sarif result should return the path without colon characters given there is no target file present and the path contains a tag" time="0.001">
    </testcase>
    <testcase classname="Retrieving sarif result should return the path without colon characters given there is no target file present and the path contains a digest" name="Retrieving sarif result should return the path without colon characters given there is no target file present and the path contains a digest" time="0">
    </testcase>
    <testcase classname="Retrieving sarif result should return the target file given there is a target file present" name="Retrieving sarif result should return the target file given there is a target file present" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="formatTestData" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:04" time="0.361" tests="3">
    <testcase classname="formatTestData formats the test data correctly" name="formatTestData formats the test data correctly" time="0.007">
    </testcase>
    <testcase classname="formatSnykIacTestTestData formats the test data correctly" name="formatSnykIacTestTestData formats the test data correctly" time="0.003">
    </testcase>
    <testcase classname="formatSnykIacTestTestData formats the test data correctly when suppressions are present" name="formatSnykIacTestTestData formats the test data correctly when suppressions are present" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="formatIacTestSummary" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:04" time="0.421" tests="4">
    <testcase classname="formatIacTestSummary should include the &apos;Test Summary&apos; title" name="formatIacTestSummary should include the &apos;Test Summary&apos; title" time="0.004">
    </testcase>
    <testcase classname="formatIacTestSummary should include the test meta properties section with the correct values" name="formatIacTestSummary should include the test meta properties section with the correct values" time="0.004">
    </testcase>
    <testcase classname="formatIacTestSummary should include the counts section with the correct values" name="formatIacTestSummary should include the counts section with the correct values" time="0.004">
    </testcase>
    <testcase classname="formatIacTestSummary should include the counts section with the correct values when suppressions are present" name="formatIacTestSummary should include the counts section with the correct values when suppressions are present" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="assertIntegratedIaCOnlyOptions()" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:04" time="0.399" tests="10">
    <testcase classname="assertIntegratedIaCOnlyOptions() accepts all command line flags accepted by the iac command" name="assertIntegratedIaCOnlyOptions() accepts all command line flags accepted by the iac command" time="0.006">
    </testcase>
    <testcase classname="assertIntegratedIaCOnlyOptions() Refuses snyk-cloud-environment flag" name="assertIntegratedIaCOnlyOptions() Refuses snyk-cloud-environment flag" time="0.027">
    </testcase>
    <testcase classname="assertIaCOptionsFlags() accepts all command line flags accepted by the iac command" name="assertIaCOptionsFlags() accepts all command line flags accepted by the iac command" time="0.001">
    </testcase>
    <testcase classname="assertIaCOptionsFlags() accepts an empty options object" name="assertIaCOptionsFlags() accepts an empty options object" time="0">
    </testcase>
    <testcase classname="assertIaCOptionsFlags() throws an error if an unexpected flag is present" name="assertIaCOptionsFlags() throws an error if an unexpected flag is present" time="0.002">
    </testcase>
    <testcase classname="assertIaCOptionsFlags() throws an error if a flag contains a typo" name="assertIaCOptionsFlags() throws an error if a flag contains a typo" time="0.002">
    </testcase>
    <testcase classname="assertIaCOptionsFlags() Terraform plan scan modes throws an error if the scan flag has no value" name="assertIaCOptionsFlags() Terraform plan scan modes throws an error if the scan flag has no value" time="0.002">
    </testcase>
    <testcase classname="assertIaCOptionsFlags() Terraform plan scan modes throws an error if the scan flag has an unsupported value" name="assertIaCOptionsFlags() Terraform plan scan modes throws an error if the scan flag has an unsupported value" time="0.002">
    </testcase>
    <testcase classname="assertIaCOptionsFlags() Terraform plan scan modes does not throw an error if the scan flag has a valid value of --scan=resource-changes" name="assertIaCOptionsFlags() Terraform plan scan modes does not throw an error if the scan flag has a valid value of --scan=resource-changes" time="0.021">
    </testcase>
    <testcase classname="assertIaCOptionsFlags() Terraform plan scan modes does not throw an error if the scan flag has a valid value of --scan=planned-values" name="assertIaCOptionsFlags() Terraform plan scan modes does not throw an error if the scan flag has a valid value of --scan=planned-values" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="analytics module" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:05" time="0.522" tests="5">
    <testcase classname="analytics module sends analytics with no token set" name="analytics module sends analytics with no token set" time="0.007">
    </testcase>
    <testcase classname="analytics module removes sensitive flags" name="analytics module removes sensitive flags" time="0.011">
    </testcase>
    <testcase classname="analytics module ignores analytics request failures" name="analytics module ignores analytics request failures" time="0.001">
    </testcase>
    <testcase classname="analytics module adds a value to the current analytics metadata" name="analytics module adds a value to the current analytics metadata" time="0.002">
    </testcase>
    <testcase classname="analytics module adds &quot;iac-type&quot; data to the current analytics metadata" name="analytics module adds &quot;iac-type&quot; data to the current analytics metadata" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="formatTestMeta" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:05" time="0.164" tests="4">
    <testcase classname="formatTestMeta with TargetFile" name="formatTestMeta with TargetFile" time="0.002">
    </testcase>
    <testcase classname="formatTestMeta without TargetFile &amp; with license Policy" name="formatTestMeta without TargetFile &amp; with license Policy" time="0.001">
    </testcase>
    <testcase classname="formatTestMeta Docker" name="formatTestMeta Docker" time="0">
    </testcase>
    <testcase classname="formatTestMeta with filesystem policy" name="formatTestMeta with filesystem policy" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="formatIacTestFailures" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:05" time="0.23" tests="4">
    <testcase classname="formatIacTestFailures should include the &quot;Invalid files: X&quot; title with the correct value" name="formatIacTestFailures should include the &quot;Invalid files: X&quot; title with the correct value" time="0.001">
    </testcase>
    <testcase classname="formatIacTestFailures should include the failures list with the correct values" name="formatIacTestFailures should include the failures list with the correct values" time="0">
    </testcase>
    <testcase classname="formatIacTestWarnings should include the &quot;Test Warnings&quot;" name="formatIacTestWarnings should include the &quot;Test Warnings&quot;" time="0.001">
    </testcase>
    <testcase classname="formatIacTestWarnings should include the warnings list with the correct format" name="formatIacTestWarnings should include the warnings list with the correct format" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="patchString" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:06" time="0.221" tests="4">
    <testcase classname="patchString can apply a patch using string" name="patchString can apply a patch using string" time="0.005">
    </testcase>
    <testcase classname="patchString keeps the same line endings" name="patchString keeps the same line endings" time="0.019">
    </testcase>
    <testcase classname="patchString will throw if patch does not match target" name="patchString will throw if patch does not match target" time="0.017">
    </testcase>
    <testcase classname="createOldStylePatchAppliedFlagFilename creates a filename for the old style patch applied flag" name="createOldStylePatchAppliedFlagFilename creates a filename for the old style patch applied flag" time="0">
    </testcase>
  </testsuite>
  <testsuite name="isUnmanagedEcosystem fn" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:06" time="0.546" tests="6">
    <testcase classname="isUnmanagedEcosystem fn should validate that given cpp as input, is considered or not an unmanaged ecosystem" name="isUnmanagedEcosystem fn should validate that given cpp as input, is considered or not an unmanaged ecosystem" time="0.001">
    </testcase>
    <testcase classname="isUnmanagedEcosystem fn should validate that given docker as input, is considered or not an unmanaged ecosystem" name="isUnmanagedEcosystem fn should validate that given docker as input, is considered or not an unmanaged ecosystem" time="0.001">
    </testcase>
    <testcase classname="isUnmanagedEcosystem fn should validate that given code as input, is considered or not an unmanaged ecosystem" name="isUnmanagedEcosystem fn should validate that given code as input, is considered or not an unmanaged ecosystem" time="0">
    </testcase>
    <testcase classname="handleProcessingStatus fn should validate that given CANCELLED as input, is considered or not an unmanaged ecosystem" name="handleProcessingStatus fn should validate that given CANCELLED as input, is considered or not an unmanaged ecosystem" time="0.008">
    </testcase>
    <testcase classname="handleProcessingStatus fn should validate that given ERROR as input, is considered or not an unmanaged ecosystem" name="handleProcessingStatus fn should validate that given ERROR as input, is considered or not an unmanaged ecosystem" time="0">
    </testcase>
    <testcase classname="formatUnmanagedResults fn should return formatted results" name="formatUnmanagedResults fn should return formatted results" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="generateUpgrades" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:06" time="0.105" tests="4">
    <testcase classname="generateUpgrades returns empty if no upgrades could be generated" name="generateUpgrades returns empty if no upgrades could be generated" time="0.002">
    </testcase>
    <testcase classname="generateUpgrades skips upgrading if expected version does not match" name="generateUpgrades skips upgrading if expected version does not match" time="0.001">
    </testcase>
    <testcase classname="generateUpgrades returns upgraded dep" name="generateUpgrades returns upgraded dep" time="0">
    </testcase>
    <testcase classname="generateUpgrades returns transitive pin even when casing is mismatched" name="generateUpgrades returns transitive pin even when casing is mismatched" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="setDefaultTestOptions" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:07" time="0.622" tests="6">
    <testcase classname="setDefaultTestOptions fix is supported for OS projects + enabled FF" name="setDefaultTestOptions fix is supported for OS projects + enabled FF" time="0.001">
    </testcase>
    <testcase classname="setDefaultTestOptions fix is NOT supported for OS projects + disabled FF" name="setDefaultTestOptions fix is NOT supported for OS projects + disabled FF" time="0.001">
    </testcase>
    <testcase classname="setDefaultTestOptions fix is NOT supported and bubbles up auth error invalid auth token" name="setDefaultTestOptions fix is NOT supported and bubbles up auth error invalid auth token" time="0.001">
    </testcase>
    <testcase classname="setDefaultTestOptions fix is NOT supported for --unmanaged + enabled FF" name="setDefaultTestOptions fix is NOT supported for --unmanaged + enabled FF" time="0.001">
    </testcase>
    <testcase classname="setDefaultTestOptions fix is NOT supported for --docker + enabled FF" name="setDefaultTestOptions fix is NOT supported for --docker + enabled FF" time="0">
    </testcase>
    <testcase classname="setDefaultTestOptions fix is NOT supported for --code + enabled FF" name="setDefaultTestOptions fix is NOT supported for --code + enabled FF" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="extractBundle" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:07" time="1.481" tests="5">
    <testcase classname="extractBundle fails to write the file on disk" name="extractBundle fails to write the file on disk" time="0.01">
    </testcase>
    <testcase classname="extractBundle resolves data successfully" name="extractBundle resolves data successfully" time="0.001">
    </testcase>
    <testcase classname="makeFileAndDirectoryGenerator iterates over all files in the directory tree, including dotfiles" name="makeFileAndDirectoryGenerator iterates over all files in the directory tree, including dotfiles" time="0.001">
    </testcase>
    <testcase classname="makeFileAndDirectoryGenerator limits the subdirectory depth when maxDepth option is provided" name="makeFileAndDirectoryGenerator limits the subdirectory depth when maxDepth option is provided" time="0.001">
    </testcase>
    <testcase classname="makeFileAndDirectoryGenerator throws an error if the path provided is not a directory" name="makeFileAndDirectoryGenerator throws an error if the path provided is not a directory" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="loadContentForFiles" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:09" time="0.287" tests="6">
    <testcase classname="loadContentForFiles with a k8s file returns an array with a single file" name="loadContentForFiles with a k8s file returns an array with a single file" time="0.007">
    </testcase>
    <testcase classname="loadContentForFiles with a terraform file returns an array with a single file" name="loadContentForFiles with a terraform file returns an array with a single file" time="0">
    </testcase>
    <testcase classname="loadContentForFiles with invalid iac file returns an array with a single file" name="loadContentForFiles with invalid iac file returns an array with a single file" time="0.001">
    </testcase>
    <testcase classname="loadContentForFiles errors throws an error when an error occurs when loading files" name="loadContentForFiles errors throws an error when an error occurs when loading files" time="0.01">
    </testcase>
    <testcase classname="tryLoadFileData should load a file without BOM" name="tryLoadFileData should load a file without BOM" time="0">
    </testcase>
    <testcase classname="tryLoadFileData should load a file with BOM" name="tryLoadFileData should load a file with BOM" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="createSarifOutputForOpenSource" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:09" time="0.205" tests="9">
    <testcase classname="createSarifOutputForOpenSource general" name="createSarifOutputForOpenSource general" time="0.002">
    </testcase>
    <testcase classname="createSarifOutputForOpenSource replace lock-file to manifest-file Gemfile.lock" name="createSarifOutputForOpenSource replace lock-file to manifest-file Gemfile.lock" time="0">
    </testcase>
    <testcase classname="createSarifOutputForOpenSource replace lock-file to manifest-file package-lock.json" name="createSarifOutputForOpenSource replace lock-file to manifest-file package-lock.json" time="0">
    </testcase>
    <testcase classname="createSarifOutputForOpenSource replace lock-file to manifest-file yarn.lock" name="createSarifOutputForOpenSource replace lock-file to manifest-file yarn.lock" time="0">
    </testcase>
    <testcase classname="createSarifOutputForOpenSource replace lock-file to manifest-file Gopkg.lock" name="createSarifOutputForOpenSource replace lock-file to manifest-file Gopkg.lock" time="0">
    </testcase>
    <testcase classname="createSarifOutputForOpenSource replace lock-file to manifest-file go.sum" name="createSarifOutputForOpenSource replace lock-file to manifest-file go.sum" time="0">
    </testcase>
    <testcase classname="createSarifOutputForOpenSource replace lock-file to manifest-file composer.lock" name="createSarifOutputForOpenSource replace lock-file to manifest-file composer.lock" time="0.001">
    </testcase>
    <testcase classname="createSarifOutputForOpenSource replace lock-file to manifest-file Podfile.lock" name="createSarifOutputForOpenSource replace lock-file to manifest-file Podfile.lock" time="0">
    </testcase>
    <testcase classname="createSarifOutputForOpenSource replace lock-file to manifest-file poetry.lock" name="createSarifOutputForOpenSource replace lock-file to manifest-file poetry.lock" time="0">
    </testcase>
  </testsuite>
  <testsuite name="lookupLocalPolicyEngine" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:09" time="0.306" tests="4">
    <testcase classname="lookupLocalPolicyEngine calls `lookupLocal` with the appropriate condition" name="lookupLocalPolicyEngine calls `lookupLocal` with the appropriate condition" time="0.002">
    </testcase>
    <testcase classname="lookupLocalPolicyEngine returns undefined when the policy engine is not present locally" name="lookupLocalPolicyEngine returns undefined when the policy engine is not present locally" time="0">
    </testcase>
    <testcase classname="lookupLocalPolicyEngine return the path to the policy engine when it is present locally" name="lookupLocalPolicyEngine return the path to the policy engine when it is present locally" time="0.001">
    </testcase>
    <testcase classname="lookupLocalPolicyEngine return an error when the condition is not met" name="lookupLocalPolicyEngine return an error when the condition is not met" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="createDirectory" errors="0" failures="1" skipped="0" timestamp="2024-06-12T20:46:10" time="2.479" tests="5">
    <testcase classname="createDirectory returns true if directory already exists - non-recursive" name="createDirectory returns true if directory already exists - non-recursive" time="0.004">
    </testcase>
    <testcase classname="createDirectory creates directory - recursive" name="createDirectory creates directory - recursive" time="0.005">
    </testcase>
    <testcase classname="writeContentsToFileSwallowingErrors can write a file" name="writeContentsToFileSwallowingErrors can write a file" time="0.005">
    </testcase>
    <testcase classname="writeContentsToFileSwallowingErrors captures any errors when attempting to write to a readonly directory" name="writeContentsToFileSwallowingErrors captures any errors when attempting to write to a readonly directory" time="0.004">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: false
Received: true
    at Object.&lt;anonymous&gt; (/project/workspace/test/jest/unit/json-file-output.spec.ts:49:41)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)</failure>
    </testcase>
    <testcase classname="saveObjectToFile can write objects to file" name="saveObjectToFile can write objects to file" time="2.012">
    </testcase>
  </testsuite>
  <testsuite name="errors.message" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:12" time="0.282" tests="8">
    <testcase classname="errors.message returns the error message if it is a VULNS error" name="errors.message returns the error message if it is a VULNS error" time="0.001">
    </testcase>
    <testcase classname="errors.message returns the error message if there is a message and it is a FormattedCustomError" name="errors.message returns the error message if there is a message and it is a FormattedCustomError" time="0.001">
    </testcase>
    <testcase classname="errors.message returns the error message based on the error code" name="errors.message returns the error message based on the error code" time="0">
    </testcase>
    <testcase classname="errors.message returns the error message based on the error message (404)" name="errors.message returns the error message based on the error message (404)" time="0">
    </testcase>
    <testcase classname="errors.message returns the error message based on the error message (NOT_FOUND)" name="errors.message returns the error message based on the error message (NOT_FOUND)" time="0.001">
    </testcase>
    <testcase classname="errors.message returns unknown error message for unknowne error code" name="errors.message returns unknown error message for unknowne error code" time="0">
    </testcase>
    <testcase classname="errors.message returns the error message if it is not recognized" name="errors.message returns the error message if it is not recognized" time="0.001">
    </testcase>
    <testcase classname="errors.message returns the error message if it is a string" name="errors.message returns the error message if it is a string" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getHandlerType" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:12" time="0.157" tests="5">
    <testcase classname="getHandlerType pip + requirements.txt is supported project type `requirements.txt`" name="getHandlerType pip + requirements.txt is supported project type `requirements.txt`" time="0.001">
    </testcase>
    <testcase classname="getHandlerType pip + dev.txt is supported project type `requirements.txt`" name="getHandlerType pip + dev.txt is supported project type `requirements.txt`" time="0.001">
    </testcase>
    <testcase classname="getHandlerType pip + Pipfile is supported" name="getHandlerType pip + Pipfile is supported" time="0.001">
    </testcase>
    <testcase classname="getHandlerType Poetry pyproject.toml is supported" name="getHandlerType Poetry pyproject.toml is supported" time="0.01">
    </testcase>
    <testcase classname="getHandlerType Poetry poetry.lock is supported" name="getHandlerType Poetry poetry.lock is supported" time="0">
    </testcase>
  </testsuite>
  <testsuite name="containsSpotlightVuln" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:13" time="0.209" tests="6">
    <testcase classname="containsSpotlightVuln returns empty array if no spotlight vulns found" name="containsSpotlightVuln returns empty array if no spotlight vulns found" time="0">
    </testcase>
    <testcase classname="containsSpotlightVuln returns empty array if `results` has no `vulnerabilities`" name="containsSpotlightVuln returns empty array if `results` has no `vulnerabilities`" time="0">
    </testcase>
    <testcase classname="containsSpotlightVuln returns empty array if a `vulnerabilities` item has no `id`" name="containsSpotlightVuln returns empty array if a `vulnerabilities` item has no `id`" time="0">
    </testcase>
    <testcase classname="containsSpotlightVuln identifies SNYK-JAVA-ORGAPACHELOGGINGLOG4J-2314720" name="containsSpotlightVuln identifies SNYK-JAVA-ORGAPACHELOGGINGLOG4J-2314720" time="0">
    </testcase>
    <testcase classname="containsSpotlightVuln returns only a single instance of a vuln if it is found multiple times" name="containsSpotlightVuln returns only a single instance of a vuln if it is found multiple times" time="0.001">
    </testcase>
    <testcase classname="containsSpotlightVuln returns matched vulnId if found, even if the shape of another item in `results` is bad" name="containsSpotlightVuln returns matched vulnId if found, even if the shape of another item in `results` is bad" time="0">
    </testcase>
  </testsuite>
  <testsuite name="showFixTip" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:13" time="0.275" tests="23">
    <testcase classname="showFixTip &quot;pip&quot; shows `snyk fix` tip" name="showFixTip &quot;pip&quot; shows `snyk fix` tip" time="0.001">
    </testcase>
    <testcase classname="showFixTip &quot;poetry&quot; shows `snyk fix` tip" name="showFixTip &quot;poetry&quot; shows `snyk fix` tip" time="0.001">
    </testcase>
    <testcase classname="showFixTip &quot;pip&quot; does not show `snyk fix` tip when there are no issues" name="showFixTip &quot;pip&quot; does not show `snyk fix` tip when there are no issues" time="0">
    </testcase>
    <testcase classname="showFixTip &quot;poetry&quot; does not show `snyk fix` tip when there are no issues" name="showFixTip &quot;poetry&quot; does not show `snyk fix` tip when there are no issues" time="0.001">
    </testcase>
    <testcase classname="showFixTip &quot;k8sconfig&quot; shows no fix related tip" name="showFixTip &quot;k8sconfig&quot; shows no fix related tip" time="0">
    </testcase>
    <testcase classname="showFixTip &quot;terraformconfig&quot; shows no fix related tip" name="showFixTip &quot;terraformconfig&quot; shows no fix related tip" time="0.001">
    </testcase>
    <testcase classname="showFixTip &quot;cloudformationconfig&quot; shows no fix related tip" name="showFixTip &quot;cloudformationconfig&quot; shows no fix related tip" time="0">
    </testcase>
    <testcase classname="showFixTip &quot;customconfig&quot; shows no fix related tip" name="showFixTip &quot;customconfig&quot; shows no fix related tip" time="0">
    </testcase>
    <testcase classname="showFixTip &quot;multiiacconfig&quot; shows no fix related tip" name="showFixTip &quot;multiiacconfig&quot; shows no fix related tip" time="0.001">
    </testcase>
    <testcase classname="showFixTip &quot;iac&quot; shows no fix related tip" name="showFixTip &quot;iac&quot; shows no fix related tip" time="0">
    </testcase>
    <testcase classname="showFixTip &quot;docker&quot; shows no fix related tip" name="showFixTip &quot;docker&quot; shows no fix related tip" time="0.001">
    </testcase>
    <testcase classname="showFixTip &quot;rubygems&quot; shows no fix related tip" name="showFixTip &quot;rubygems&quot; shows no fix related tip" time="0">
    </testcase>
    <testcase classname="showFixTip &quot;maven&quot; shows no fix related tip" name="showFixTip &quot;maven&quot; shows no fix related tip" time="0">
    </testcase>
    <testcase classname="showFixTip &quot;sbt&quot; shows no fix related tip" name="showFixTip &quot;sbt&quot; shows no fix related tip" time="0">
    </testcase>
    <testcase classname="showFixTip &quot;gradle&quot; shows no fix related tip" name="showFixTip &quot;gradle&quot; shows no fix related tip" time="0">
    </testcase>
    <testcase classname="showFixTip &quot;golangdep&quot; shows no fix related tip" name="showFixTip &quot;golangdep&quot; shows no fix related tip" time="0.001">
    </testcase>
    <testcase classname="showFixTip &quot;govendor&quot; shows no fix related tip" name="showFixTip &quot;govendor&quot; shows no fix related tip" time="0.001">
    </testcase>
    <testcase classname="showFixTip &quot;gomodules&quot; shows no fix related tip" name="showFixTip &quot;gomodules&quot; shows no fix related tip" time="0.001">
    </testcase>
    <testcase classname="showFixTip &quot;nuget&quot; shows no fix related tip" name="showFixTip &quot;nuget&quot; shows no fix related tip" time="0">
    </testcase>
    <testcase classname="showFixTip &quot;paket&quot; shows no fix related tip" name="showFixTip &quot;paket&quot; shows no fix related tip" time="0">
    </testcase>
    <testcase classname="showFixTip &quot;composer&quot; shows no fix related tip" name="showFixTip &quot;composer&quot; shows no fix related tip" time="0.001">
    </testcase>
    <testcase classname="showFixTip &quot;cocoapods&quot; shows no fix related tip" name="showFixTip &quot;cocoapods&quot; shows no fix related tip" time="0">
    </testcase>
    <testcase classname="showFixTip &quot;hex&quot; shows no fix related tip" name="showFixTip &quot;hex&quot; shows no fix related tip" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="setDefaultTestOptions" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:13" time="0.291" tests="8">
    <testcase classname="setDefaultTestOptions defaults to show-vulnerable-paths:some &amp; org from config when no options passed in" name="setDefaultTestOptions defaults to show-vulnerable-paths:some &amp; org from config when no options passed in" time="0.001">
    </testcase>
    <testcase classname="setDefaultTestOptions with show-vulnerable-paths set to `false` =&gt; `none`" name="setDefaultTestOptions with show-vulnerable-paths set to `false` =&gt; `none`" time="0">
    </testcase>
    <testcase classname="setDefaultTestOptions with show-vulnerable-paths as boolean =&gt; `some`" name="setDefaultTestOptions with show-vulnerable-paths as boolean =&gt; `some`" time="0.001">
    </testcase>
    <testcase classname="setDefaultTestOptions with show-vulnerable-paths set to `none` =&gt; `none`" name="setDefaultTestOptions with show-vulnerable-paths set to `none` =&gt; `none`" time="0.001">
    </testcase>
    <testcase classname="setDefaultTestOptions with show-vulnerable-paths set to `true` =&gt; `some`" name="setDefaultTestOptions with show-vulnerable-paths set to `true` =&gt; `some`" time="0">
    </testcase>
    <testcase classname="setDefaultTestOptions with show-vulnerable-paths set to `some` =&gt; `some`" name="setDefaultTestOptions with show-vulnerable-paths set to `some` =&gt; `some`" time="0">
    </testcase>
    <testcase classname="setDefaultTestOptions with show-vulnerable-paths set to `all` =&gt; `all`" name="setDefaultTestOptions with show-vulnerable-paths set to `all` =&gt; `all`" time="0.001">
    </testcase>
    <testcase classname="setDefaultTestOptions with org set" name="setDefaultTestOptions with org set" time="0">
    </testcase>
  </testsuite>
  <testsuite name="display help message" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:13" time="0.165" tests="6">
    <testcase classname="display help message should return undefined options &amp; `cwd` path when path is undefined" name="display help message should return undefined options &amp; `cwd` path when path is undefined" time="0.001">
    </testcase>
    <testcase classname="display help message should return no paths when running a container scan with no image" name="display help message should return no paths when running a container scan with no image" time="0">
    </testcase>
    <testcase classname="display help message should return undefined options &amp; `cwd` path when path is undefined + --json" name="display help message should return undefined options &amp; `cwd` path when path is undefined + --json" time="0.001">
    </testcase>
    <testcase classname="display help message should return expected options &amp; paths when path &amp; options provided" name="display help message should return expected options &amp; paths when path &amp; options provided" time="0">
    </testcase>
    <testcase classname="display help message should return expected options &amp; paths when multiple paths provided" name="display help message should return expected options &amp; paths when multiple paths provided" time="0">
    </testcase>
    <testcase classname="display help message should return no options &amp; packageName path when packageName is provided" name="display help message should return no options &amp; packageName path when packageName is provided" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="generatePins" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:13" time="0.11" tests="3">
    <testcase classname="generatePins returns empty if no pins could be generated" name="generatePins returns empty if no pins could be generated" time="0.002">
    </testcase>
    <testcase classname="generatePins returns transitive pin" name="generatePins returns transitive pin" time="0">
    </testcase>
    <testcase classname="generatePins returns transitive pin even when casing is mismatched" name="generatePins returns transitive pin even when casing is mismatched" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getIssueCountBySeverity" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:14" time="0.151" tests="3">
    <testcase classname="getIssueCountBySeverity correctly returns when no issues" name="getIssueCountBySeverity correctly returns when no issues" time="0.001">
    </testcase>
    <testcase classname="getIssueCountBySeverity correctly returns when all severities are present" name="getIssueCountBySeverity correctly returns when all severities are present" time="0">
    </testcase>
    <testcase classname="getIssueCountBySeverity correctly returns when some severities are present" name="getIssueCountBySeverity correctly returns when some severities are present" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getStandardData returns object" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:14" time="0.201" tests="2">
    <testcase classname="getStandardData returns object contains all the required fields" name="getStandardData returns object contains all the required fields" time="0.003">
    </testcase>
    <testcase classname="getStandardData returns object contains all the required fields with integration info" name="getStandardData returns object contains all the required fields with integration info" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="tracking IaC test usage" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:14" time="0.4" tests="3">
    <testcase classname="tracking IaC test usage does not throw an error when backend returns HTTP 200" name="tracking IaC test usage does not throw an error when backend returns HTTP 200" time="0.002">
    </testcase>
    <testcase classname="tracking IaC test usage throws TestLimitReachedError when backend returns HTTP 429" name="tracking IaC test usage throws TestLimitReachedError when backend returns HTTP 429" time="0.019">
    </testcase>
    <testcase classname="tracking IaC test usage throws CustomError when backend returns HTTP 500" name="tracking IaC test usage throws CustomError when backend returns HTTP 500" time="0">
    </testcase>
  </testsuite>
  <testsuite name="initRules" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:14" time="1.082" tests="3">
    <testcase classname="initRules should fail if an authentication error occurs" name="initRules should fail if an authentication error occurs" time="0.006">
    </testcase>
    <testcase classname="initRules should fail if rules registry and custom rules are both provided" name="initRules should fail if rules registry and custom rules are both provided" time="0.002">
    </testcase>
    <testcase classname="initRules should fail if the user is not entitled to use custom rules" name="initRules should fail if the user is not entitled to use custom rules" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="formatPolicyEngineFileName" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:15" time="0.172" tests="11">
    <testcase classname="formatPolicyEngineFileName with `darwin` platform and `arm64` architecture returns snyk-iac-test_6.6.6_Darwin_arm64" name="formatPolicyEngineFileName with `darwin` platform and `arm64` architecture returns snyk-iac-test_6.6.6_Darwin_arm64" time="0.001">
    </testcase>
    <testcase classname="formatPolicyEngineFileName with `darwin` platform and `any-other-arch` architecture returns snyk-iac-test_6.6.6_Darwin_x86_64" name="formatPolicyEngineFileName with `darwin` platform and `any-other-arch` architecture returns snyk-iac-test_6.6.6_Darwin_x86_64" time="0">
    </testcase>
    <testcase classname="formatPolicyEngineFileName with `win32` platform and `arm64` architecture returns snyk-iac-test_6.6.6_Windows_arm64.exe" name="formatPolicyEngineFileName with `win32` platform and `arm64` architecture returns snyk-iac-test_6.6.6_Windows_arm64.exe" time="0.001">
    </testcase>
    <testcase classname="formatPolicyEngineFileName with `win32` platform and `any-other-arch` architecture returns snyk-iac-test_6.6.6_Windows_x86_64.exe" name="formatPolicyEngineFileName with `win32` platform and `any-other-arch` architecture returns snyk-iac-test_6.6.6_Windows_x86_64.exe" time="0">
    </testcase>
    <testcase classname="formatPolicyEngineFileName with `any-other-platform` platform and `arm64` architecture returns snyk-iac-test_6.6.6_Linux_arm64" name="formatPolicyEngineFileName with `any-other-platform` platform and `arm64` architecture returns snyk-iac-test_6.6.6_Linux_arm64" time="0">
    </testcase>
    <testcase classname="formatPolicyEngineFileName with `any-other-platform` platform and `any-other-arch` architecture returns snyk-iac-test_6.6.6_Linux_x86_64" name="formatPolicyEngineFileName with `any-other-platform` platform and `any-other-arch` architecture returns snyk-iac-test_6.6.6_Linux_x86_64" time="0">
    </testcase>
    <testcase classname="getChecksum returns a checksum for `snyk-iac-test_0.51.3_Darwin_arm64`" name="getChecksum returns a checksum for `snyk-iac-test_0.51.3_Darwin_arm64`" time="0.001">
    </testcase>
    <testcase classname="getChecksum returns a checksum for `snyk-iac-test_0.51.3_Darwin_x86_64`" name="getChecksum returns a checksum for `snyk-iac-test_0.51.3_Darwin_x86_64`" time="0">
    </testcase>
    <testcase classname="getChecksum returns a checksum for `snyk-iac-test_0.51.3_Windows_x86_64.exe`" name="getChecksum returns a checksum for `snyk-iac-test_0.51.3_Windows_x86_64.exe`" time="0">
    </testcase>
    <testcase classname="getChecksum returns a checksum for `snyk-iac-test_0.51.3_Linux_arm64`" name="getChecksum returns a checksum for `snyk-iac-test_0.51.3_Linux_arm64`" time="0">
    </testcase>
    <testcase classname="getChecksum returns a checksum for `snyk-iac-test_0.51.3_Linux_x86_64`" name="getChecksum returns a checksum for `snyk-iac-test_0.51.3_Linux_x86_64`" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="saveJsonToFileCreatingDirectoryIfRequired" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:16" time="0.178" tests="4">
    <testcase classname="saveJsonToFileCreatingDirectoryIfRequired supports absolute paths with directory that does not exists" name="saveJsonToFileCreatingDirectoryIfRequired supports absolute paths with directory that does not exists" time="0.014">
    </testcase>
    <testcase classname="saveJsonToFileCreatingDirectoryIfRequired supports absolute paths with directory that already exists" name="saveJsonToFileCreatingDirectoryIfRequired supports absolute paths with directory that already exists" time="0.002">
    </testcase>
    <testcase classname="saveJsonToFileCreatingDirectoryIfRequired supports relative paths with directory that does not exists" name="saveJsonToFileCreatingDirectoryIfRequired supports relative paths with directory that does not exists" time="0.002">
    </testcase>
    <testcase classname="saveJsonToFileCreatingDirectoryIfRequired supports relative paths with directory that already exists" name="saveJsonToFileCreatingDirectoryIfRequired supports relative paths with directory that already exists" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="tryParsingTerraformPlan" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:16" time="1.074" tests="12">
    <testcase classname="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: false} for &quot;tf-plan-create&quot;, it extracts the expected resources" name="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: false} for &quot;tf-plan-create&quot;, it extracts the expected resources" time="0.017">
    </testcase>
    <testcase classname="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: false} for &quot;tf-plan-destroy&quot;, it extracts the expected resources" name="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: false} for &quot;tf-plan-destroy&quot;, it extracts the expected resources" time="0.003">
    </testcase>
    <testcase classname="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: false} for &quot;tf-plan-no-op&quot;, it extracts the expected resources" name="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: false} for &quot;tf-plan-no-op&quot;, it extracts the expected resources" time="0.038">
    </testcase>
    <testcase classname="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: false} for &quot;tf-plan-update&quot;, it extracts the expected resources" name="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: false} for &quot;tf-plan-update&quot;, it extracts the expected resources" time="0.002">
    </testcase>
    <testcase classname="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: false} for &quot;tf-plan-v4&quot;, it extracts the expected resources" name="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: false} for &quot;tf-plan-v4&quot;, it extracts the expected resources" time="0.002">
    </testcase>
    <testcase classname="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: false} for &quot;tf-plan-null&quot;, it extracts the expected resources" name="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: false} for &quot;tf-plan-null&quot;, it extracts the expected resources" time="0.002">
    </testcase>
    <testcase classname="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: true} for &quot;tf-plan-create&quot;, it extracts the expected resources" name="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: true} for &quot;tf-plan-create&quot;, it extracts the expected resources" time="0.002">
    </testcase>
    <testcase classname="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: true} for &quot;tf-plan-destroy&quot;, it extracts the expected resources" name="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: true} for &quot;tf-plan-destroy&quot;, it extracts the expected resources" time="0.001">
    </testcase>
    <testcase classname="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: true} for &quot;tf-plan-no-op&quot;, it extracts the expected resources" name="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: true} for &quot;tf-plan-no-op&quot;, it extracts the expected resources" time="0.004">
    </testcase>
    <testcase classname="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: true} for &quot;tf-plan-update&quot;, it extracts the expected resources" name="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: true} for &quot;tf-plan-update&quot;, it extracts the expected resources" time="0.002">
    </testcase>
    <testcase classname="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: true} for &quot;tf-plan-v4&quot;, it extracts the expected resources" name="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: true} for &quot;tf-plan-v4&quot;, it extracts the expected resources" time="0.001">
    </testcase>
    <testcase classname="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: true} for &quot;tf-plan-null&quot;, it extracts the expected resources" name="tryParsingTerraformPlan Parsing regression testing if: {&quot;isFullScan&quot;: true} for &quot;tf-plan-null&quot;, it extracts the expected resources" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="input validation for snyk apps" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:17" time="0.876" tests="13">
    <testcase classname="input validation for snyk apps validate url validate individual url &apos;https://example.com&apos;" name="input validation for snyk apps validate url validate individual url &apos;https://example.com&apos;" time="0.001">
    </testcase>
    <testcase classname="input validation for snyk apps validate url validate individual url &apos;https://example.com/callback&apos;" name="input validation for snyk apps validate url validate individual url &apos;https://example.com/callback&apos;" time="0.001">
    </testcase>
    <testcase classname="input validation for snyk apps validate url validate individual url &apos;localhost:3000/callback&apos;" name="input validation for snyk apps validate url validate individual url &apos;localhost:3000/callback&apos;" time="0">
    </testcase>
    <testcase classname="input validation for snyk apps validate url validate individual url &apos;localhost:3000/callback,something&apos;" name="input validation for snyk apps validate url validate individual url &apos;localhost:3000/callback,something&apos;" time="0">
    </testcase>
    <testcase classname="input validation for snyk apps validate url validate individual url &apos;localhost:3000&apos;" name="input validation for snyk apps validate url validate individual url &apos;localhost:3000&apos;" time="0">
    </testcase>
    <testcase classname="input validation for snyk apps validate url validate individual url &apos;#somethig-wrong.com&apos;" name="input validation for snyk apps validate url validate individual url &apos;#somethig-wrong.com&apos;" time="0.001">
    </testcase>
    <testcase classname="input validation for snyk apps validate url validate individual url &apos;#somethig-wrong&apos;" name="input validation for snyk apps validate url validate individual url &apos;#somethig-wrong&apos;" time="0">
    </testcase>
    <testcase classname="input validation for snyk apps validate url validate individual url &apos;somethig wrong&apos;" name="input validation for snyk apps validate url validate individual url &apos;somethig wrong&apos;" time="0">
    </testcase>
    <testcase classname="input validation for snyk apps validate url validate individual url &apos;somethig&amp;wrong.com&apos;" name="input validation for snyk apps validate url validate individual url &apos;somethig&amp;wrong.com&apos;" time="0">
    </testcase>
    <testcase classname="input validation for snyk apps validate input should return error message for empty input" name="input validation for snyk apps validate input should return error message for empty input" time="0">
    </testcase>
    <testcase classname="input validation for snyk apps validate input should return boolean true for valid input" name="input validation for snyk apps validate input should return boolean true for valid input" time="0.001">
    </testcase>
    <testcase classname="input validation for snyk apps validate all url string should return error message if one or more url invalid" name="input validation for snyk apps validate all url string should return error message if one or more url invalid" time="0">
    </testcase>
    <testcase classname="input validation for snyk apps validate all url string should return true if all url valid" name="input validation for snyk apps validate all url string should return true if all url valid" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getHandlerType" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:18" time="0.16" tests="9">
    <testcase classname="getHandlerType pip + requirements.txt is supported project type `requirements.txt`" name="getHandlerType pip + requirements.txt is supported project type `requirements.txt`" time="0">
    </testcase>
    <testcase classname="getHandlerType pip + dev.txt is supported project type `requirements.txt`" name="getHandlerType pip + dev.txt is supported project type `requirements.txt`" time="0">
    </testcase>
    <testcase classname="getHandlerType pip + Pipfile is supported project type `Pipfile`" name="getHandlerType pip + Pipfile is supported project type `Pipfile`" time="0">
    </testcase>
    <testcase classname="getHandlerType poetry + pyproject.toml is supported project type `pyproject.toml`" name="getHandlerType poetry + pyproject.toml is supported project type `pyproject.toml`" time="0">
    </testcase>
    <testcase classname="getHandlerType poetry + poetry.lock is supported project type `pyproject.toml`" name="getHandlerType poetry + poetry.lock is supported project type `pyproject.toml`" time="0.001">
    </testcase>
    <testcase classname="isRequirementsTxtManifest dev.txt is requirements.txt manifest" name="isRequirementsTxtManifest dev.txt is requirements.txt manifest" time="0">
    </testcase>
    <testcase classname="isRequirementsTxtManifest lib/prod.txt is requirements.txt manifest" name="isRequirementsTxtManifest lib/prod.txt is requirements.txt manifest" time="0">
    </testcase>
    <testcase classname="isRequirementsTxtManifest requirements.txt is correctly classed as requirements.txt manifest" name="isRequirementsTxtManifest requirements.txt is correctly classed as requirements.txt manifest" time="0">
    </testcase>
    <testcase classname="isRequirementsTxtManifest package.json is correctly classed as NOT a requirements.txt manifest" name="isRequirementsTxtManifest package.json is correctly classed as NOT a requirements.txt manifest" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isSupported" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:18" time="0.117" tests="5">
    <testcase classname="isSupported with missing remediation is not supported" name="isSupported with missing remediation is not supported" time="0.001">
    </testcase>
    <testcase classname="isSupported with empty Pins is not supported" name="isSupported with empty Pins is not supported" time="0">
    </testcase>
    <testcase classname="isSupported with -r directive in the manifest is supported" name="isSupported with -r directive in the manifest is supported" time="0">
    </testcase>
    <testcase classname="isSupported with -c directive in the manifest is supported" name="isSupported with -c directive in the manifest is supported" time="0">
    </testcase>
    <testcase classname="isSupported with -e directive in the manifest is supported" name="isSupported with -e directive in the manifest is supported" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Sanitize args" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:18" time="0.368" tests="3">
    <testcase classname="Sanitize args should obfuscate username and password when both are provided" name="Sanitize args should obfuscate username and password when both are provided" time="0.002">
    </testcase>
    <testcase classname="Sanitize args should obfuscate personally identifiable information from args" name="Sanitize args should obfuscate personally identifiable information from args" time="0.002">
    </testcase>
    <testcase classname="Sanitize args should obfuscate nested PII" name="Sanitize args should obfuscate nested PII" time="0">
    </testcase>
  </testsuite>
  <testsuite name="callHandlingUnexpectedErrors" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:18" time="12.51" tests="4">
    <testcase classname="callHandlingUnexpectedErrors calls the provided callable" name="callHandlingUnexpectedErrors calls the provided callable" time="3.441">
    </testcase>
    <testcase classname="callHandlingUnexpectedErrors exits when provided callable rejects" name="callHandlingUnexpectedErrors exits when provided callable rejects" time="3">
    </testcase>
    <testcase classname="callHandlingUnexpectedErrors exits on uncaughtException" name="callHandlingUnexpectedErrors exits on uncaughtException" time="3.312">
    </testcase>
    <testcase classname="callHandlingUnexpectedErrors exits on unhandledRejection" name="callHandlingUnexpectedErrors exits on unhandledRejection" time="2.264">
    </testcase>
  </testsuite>
  <testsuite name="applyUpgrades" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:31" time="0.106" tests="4">
    <testcase classname="applyUpgrades returns original requirements if no upgrades available" name="applyUpgrades returns original requirements if no upgrades available" time="0.001">
    </testcase>
    <testcase classname="applyUpgrades returns correctly when upgrade is to itself" name="applyUpgrades returns correctly when upgrade is to itself" time="0.001">
    </testcase>
    <testcase classname="applyUpgrades updates correctly when upgrade is available" name="applyUpgrades updates correctly when upgrade is available" time="0">
    </testcase>
    <testcase classname="applyUpgrades updates correctly when upgrade is available" name="applyUpgrades updates correctly when upgrade is available" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="computeIacAnalytics" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:31" time="0.264" tests="1">
    <testcase classname="computeIacAnalytics sends the expected analytics" name="computeIacAnalytics sends the expected analytics" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="containsRequireDirective" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:31" time="0.126" tests="7">
    <testcase classname="containsRequireDirective with -r" name="containsRequireDirective with -r" time="0.001">
    </testcase>
    <testcase classname="containsRequireDirective without -r" name="containsRequireDirective without -r" time="0">
    </testcase>
    <testcase classname="containsRequireDirective with multiple -r" name="containsRequireDirective with multiple -r" time="0.001">
    </testcase>
    <testcase classname="containsRequireDirective with -c" name="containsRequireDirective with -c" time="0">
    </testcase>
    <testcase classname="containsRequireDirective without -c" name="containsRequireDirective without -c" time="0">
    </testcase>
    <testcase classname="containsRequireDirective with -r &amp; -c" name="containsRequireDirective with -r &amp; -c" time="0.001">
    </testcase>
    <testcase classname="containsRequireDirective with -r &amp; -c after deps" name="containsRequireDirective with -r &amp; -c after deps" time="0">
    </testcase>
  </testsuite>
  <testsuite name="findHelpFile" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:31" time="0.301" tests="8">
    <testcase classname="findHelpFile returns default help README path with no arguments" name="findHelpFile returns default help README path with no arguments" time="0.001">
    </testcase>
    <testcase classname="findHelpFile returns default help README path with non-existing command" name="findHelpFile returns default help README path with non-existing command" time="0">
    </testcase>
    <testcase classname="findHelpFile returns correct help markdown path with a `test` command" name="findHelpFile returns correct help markdown path with a `test` command" time="0.001">
    </testcase>
    <testcase classname="findHelpFile returns correct help markdown path with a `container` command" name="findHelpFile returns correct help markdown path with a `container` command" time="0">
    </testcase>
    <testcase classname="findHelpFile returns correct help markdown path with a `container test` subcommand" name="findHelpFile returns correct help markdown path with a `container test` subcommand" time="0">
    </testcase>
    <testcase classname="findHelpFile returns correct help markdown path with a `container monitor` subcommand" name="findHelpFile returns correct help markdown path with a `container monitor` subcommand" time="0.001">
    </testcase>
    <testcase classname="findHelpFile returns correct help markdown path for a documented subcommand with `iac describe`" name="findHelpFile returns correct help markdown path for a documented subcommand with `iac describe`" time="0">
    </testcase>
    <testcase classname="findHelpFile returns correct help markdown path for a documented subcommand with `iac update-exclude-policy`" name="findHelpFile returns correct help markdown path for a documented subcommand with `iac update-exclude-policy`" time="0">
    </testcase>
  </testsuite>
  <testsuite name="convertEngineToJsonResults" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:32" time="0.23" tests="1">
    <testcase classname="convertEngineToJsonResults returns expected JSON result" name="convertEngineToJsonResults returns expected JSON result" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getOrg" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:32" time="0.277" tests="5">
    <testcase classname="getOrg returns a UUID when parameter is null" name="getOrg returns a UUID when parameter is null" time="0.001">
    </testcase>
    <testcase classname="getOrg returns a UUID when parameter is an emptry string" name="getOrg returns a UUID when parameter is an emptry string" time="0.001">
    </testcase>
    <testcase classname="getOrg returns a UUID when parameter is a matching org slug" name="getOrg returns a UUID when parameter is a matching org slug" time="0">
    </testcase>
    <testcase classname="getOrg returns an empty string when parameter is not a matching org slug" name="getOrg returns an empty string when parameter is not a matching org slug" time="0.001">
    </testcase>
    <testcase classname="getOrg returns the same string when parameter is a UUID" name="getOrg returns the same string when parameter is a UUID" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Detect extra projects available that could be tested using --all-projects" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:32" time="0.218" tests="3">
    <testcase classname="Detect extra projects available that could be tested using --all-projects should return `1` when a single sub-projects is found" name="Detect extra projects available that could be tested using --all-projects should return `1` when a single sub-projects is found" time="0.001">
    </testcase>
    <testcase classname="Detect extra projects available that could be tested using --all-projects should return `extra-project-count = 2` when exists more than a single project" name="Detect extra projects available that could be tested using --all-projects should return `extra-project-count = 2` when exists more than a single project" time="0">
    </testcase>
    <testcase classname="Detect extra projects available that could be tested using --all-projects should return `undefined` when `unmanaged` command for cpp is being used" name="Detect extra projects available that could be tested using --all-projects should return `undefined` when `unmanaged` command for cpp is being used" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isDocker" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:33" time="0.313" tests="3">
    <testcase classname="isDocker inside a Docker container (.dockerenv test)" name="isDocker inside a Docker container (.dockerenv test)" time="0.002">
    </testcase>
    <testcase classname="isDocker inside a Docker container (cgroup test)" name="isDocker inside a Docker container (cgroup test)" time="0.001">
    </testcase>
    <testcase classname="isDocker not inside a Docker container" name="isDocker not inside a Docker container" time="0">
    </testcase>
  </testsuite>
  <testsuite name="url-utils.ts" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:33" time="0.167" tests="12">
    <testcase classname="url-utils.ts isValidUrl Given a valid URL With a protocol - it returns true https://valid.io/url" name="url-utils.ts isValidUrl Given a valid URL With a protocol - it returns true https://valid.io/url" time="0.001">
    </testcase>
    <testcase classname="url-utils.ts isValidUrl Given a valid URL With a protocol - it returns true https://valid.io/url:latest" name="url-utils.ts isValidUrl Given a valid URL With a protocol - it returns true https://valid.io/url:latest" time="0.001">
    </testcase>
    <testcase classname="url-utils.ts isValidUrl Given a valid URL With a protocol - it returns true https://valid.io/url:0.1.0" name="url-utils.ts isValidUrl Given a valid URL With a protocol - it returns true https://valid.io/url:0.1.0" time="0">
    </testcase>
    <testcase classname="url-utils.ts isValidUrl Given a valid URL Without a protocol - it returns true valid.io/url" name="url-utils.ts isValidUrl Given a valid URL Without a protocol - it returns true valid.io/url" time="0">
    </testcase>
    <testcase classname="url-utils.ts isValidUrl Given a valid URL Without a protocol - it returns true valid.io/url:latest" name="url-utils.ts isValidUrl Given a valid URL Without a protocol - it returns true valid.io/url:latest" time="0">
    </testcase>
    <testcase classname="url-utils.ts isValidUrl Given a valid URL Without a protocol - it returns true valid.io/url:0.1.0" name="url-utils.ts isValidUrl Given a valid URL Without a protocol - it returns true valid.io/url:0.1.0" time="0.001">
    </testcase>
    <testcase classname="url-utils.ts isValidUrl When given an invalid URL With a protocol - it returns false http://an/invalid/url" name="url-utils.ts isValidUrl When given an invalid URL With a protocol - it returns false http://an/invalid/url" time="0">
    </testcase>
    <testcase classname="url-utils.ts isValidUrl When given an invalid URL With a protocol - it returns false https://an-invalid-url" name="url-utils.ts isValidUrl When given an invalid URL With a protocol - it returns false https://an-invalid-url" time="0">
    </testcase>
    <testcase classname="url-utils.ts isValidUrl When given an invalid URL With a protocol - it returns false http://:an_invalid/url" name="url-utils.ts isValidUrl When given an invalid URL With a protocol - it returns false http://:an_invalid/url" time="0">
    </testcase>
    <testcase classname="url-utils.ts isValidUrl When given an invalid URL Without a protocol - it returns false an/invalid/url" name="url-utils.ts isValidUrl When given an invalid URL Without a protocol - it returns false an/invalid/url" time="0.01">
    </testcase>
    <testcase classname="url-utils.ts isValidUrl When given an invalid URL Without a protocol - it returns false an-invalid-url" name="url-utils.ts isValidUrl When given an invalid URL Without a protocol - it returns false an-invalid-url" time="0">
    </testcase>
    <testcase classname="url-utils.ts isValidUrl When given an invalid URL Without a protocol - it returns false :an_invalid/url" name="url-utils.ts isValidUrl When given an invalid URL Without a protocol - it returns false :an_invalid/url" time="0">
    </testcase>
  </testsuite>
  <testsuite name="showAllProjectsTip" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:33" time="0.176" tests="7">
    <testcase classname="showAllProjectsTip gradle project tested with --gradle-sub-project should show tip" name="showAllProjectsTip gradle project tested with --gradle-sub-project should show tip" time="0.001">
    </testcase>
    <testcase classname="showAllProjectsTip gradle project tested with --sub-project should show tip" name="showAllProjectsTip gradle project tested with --sub-project should show tip" time="0.001">
    </testcase>
    <testcase classname="showAllProjectsTip gradle project tested with --all-projects should NOT show tip" name="showAllProjectsTip gradle project tested with --all-projects should NOT show tip" time="0">
    </testcase>
    <testcase classname="showAllProjectsTip gradle project scanned with --all-sub-projects should NOT show tip" name="showAllProjectsTip gradle project scanned with --all-sub-projects should NOT show tip" time="0">
    </testcase>
    <testcase classname="showAllProjectsTip gradle project scanned without --all-sub-projects with 0 detected extra projects should NOT show tip" name="showAllProjectsTip gradle project scanned without --all-sub-projects with 0 detected extra projects should NOT show tip" time="0">
    </testcase>
    <testcase classname="showAllProjectsTip npm project + detected 8 other projects should NOT show tip" name="showAllProjectsTip npm project + detected 8 other projects should NOT show tip" time="0.001">
    </testcase>
    <testcase classname="showAllProjectsTip gradle project + detected 8 other projects should show tip" name="showAllProjectsTip gradle project + detected 8 other projects should show tip" time="0">
    </testcase>
  </testsuite>
  <testsuite name="service-mappings" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:33" time="0.304" tests="5">
    <testcase classname="service-mappings validation throws an error when an unknown service is used" name="service-mappings validation throws an error when an unknown service is used" time="0.02">
    </testcase>
    <testcase classname="service-mappings validation throws an error when an empty service list is used" name="service-mappings validation throws an error when an empty service list is used" time="0">
    </testcase>
    <testcase classname="service-mappings validation does not throw an error when a known service is used" name="service-mappings validation does not throw an error when a known service is used" time="0.001">
    </testcase>
    <testcase classname="service-mappings ignore pattern creation should create the correct pattern" name="service-mappings ignore pattern creation should create the correct pattern" time="0">
    </testcase>
    <testcase classname="service-mappings ignore pattern creation should not include the same ignore pattern replicated multiple times" name="service-mappings ignore pattern creation should not include the same ignore pattern replicated multiple times" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="npm-modules-parser" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:34" time="0.237" tests="2">
    <testcase classname="npm-modules-parser parse package name should fall back to &quot;package.json&quot; when no name and no dependencies" name="npm-modules-parser parse package name should fall back to &quot;package.json&quot; when no name and no dependencies" time="0.001">
    </testcase>
    <testcase classname="npm-modules-parser parse package name should match package.json when no dependencies" name="npm-modules-parser parse package name should match package.json when no dependencies" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Convert legacy TestResult to ScanResult" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:34" time="0.188" tests="3">
    <testcase classname="Convert legacy TestResult to ScanResult can convert npm test result with no remediation" name="Convert legacy TestResult to ScanResult can convert npm test result with no remediation" time="0.002">
    </testcase>
    <testcase classname="Convert legacy TestResult to ScanResult can convert npm test result with remediation" name="Convert legacy TestResult to ScanResult can convert npm test result with remediation" time="0.001">
    </testcase>
    <testcase classname="Convert legacy TestResult to ScanResult can convert pip test result with remediation (pins)" name="Convert legacy TestResult to ScanResult can convert pip test result with remediation (pins)" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="findPhysicalModules" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:34" time="0.125" tests="3">
    <testcase classname="findPhysicalModules works with no matching physical modules" name="findPhysicalModules works with no matching physical modules" time="0.001">
    </testcase>
    <testcase classname="findPhysicalModules works with single matching physical module" name="findPhysicalModules works with single matching physical module" time="0">
    </testcase>
    <testcase classname="findPhysicalModules works with multiple matching physical modules" name="findPhysicalModules works with multiple matching physical modules" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="showMultiScanTip" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:34" time="0.164" tests="5">
    <testcase classname="showMultiScanTip gradle project tested with --gradle-sub-project should show gradle tip" name="showMultiScanTip gradle project tested with --gradle-sub-project should show gradle tip" time="0">
    </testcase>
    <testcase classname="showMultiScanTip npm project should show --all-projects tip" name="showMultiScanTip npm project should show --all-projects tip" time="0">
    </testcase>
    <testcase classname="showMultiScanTip gradle scan with --all-sub-projects should NOT show tip" name="showMultiScanTip gradle scan with --all-sub-projects should NOT show tip" time="0">
    </testcase>
    <testcase classname="showMultiScanTip npm scan with --all-projects should NOT show tip" name="showMultiScanTip npm scan with --all-projects should NOT show tip" time="0">
    </testcase>
    <testcase classname="showMultiScanTip maven without options and more than 1 file detected shows tip" name="showMultiScanTip maven without options and more than 1 file detected shows tip" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="@snyk/dep-graph" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:34" time="0.159" tests="1">
    <testcase classname="@snyk/dep-graph createFromJSON supports percent-encoded plus sign in purl version" name="@snyk/dep-graph createFromJSON supports percent-encoded plus sign in purl version" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="formatLegalInstructions" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:34" time="0.17" tests="1">
    <testcase classname="formatLegalInstructions Returns formatted bullets as expected" name="formatLegalInstructions Returns formatted bullets as expected" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="colorTextBySeverity" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:35" time="0.154" tests="5">
    <testcase classname="colorTextBySeverity Returns a high severity colored text" name="colorTextBySeverity Returns a high severity colored text" time="0.001">
    </testcase>
    <testcase classname="colorTextBySeverity Pass an empty string as text" name="colorTextBySeverity Pass an empty string as text" time="0.001">
    </testcase>
    <testcase classname="colorTextBySeverity Pass an empty string as severity" name="colorTextBySeverity Pass an empty string as severity" time="0">
    </testcase>
    <testcase classname="colorTextBySeverity Set defaultive low color when given a non existent severity" name="colorTextBySeverity Set defaultive low color when given a non existent severity" time="0">
    </testcase>
    <testcase classname="colorTextBySeverity Pass an upper case string as severity" name="colorTextBySeverity Pass an upper case string as severity" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Convert legacy TestResult to ScanResult" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:35" time="0.154" tests="3">
    <testcase classname="Convert legacy TestResult to ScanResult can convert npm test result with no remediation" name="Convert legacy TestResult to ScanResult can convert npm test result with no remediation" time="0.002">
    </testcase>
    <testcase classname="Convert legacy TestResult to ScanResult can convert npm test result with remediation" name="Convert legacy TestResult to ScanResult can convert npm test result with remediation" time="0.001">
    </testcase>
    <testcase classname="Convert legacy TestResult to ScanResult can convert pip test result with remediation (pins)" name="Convert legacy TestResult to ScanResult can convert pip test result with remediation (pins)" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Convert legacy TestResult to ScanResult" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:35" time="0.157" tests="3">
    <testcase classname="Convert legacy TestResult to ScanResult can convert npm test result with no remediation" name="Convert legacy TestResult to ScanResult can convert npm test result with no remediation" time="0.002">
    </testcase>
    <testcase classname="Convert legacy TestResult to ScanResult can convert npm test result with remediation" name="Convert legacy TestResult to ScanResult can convert npm test result with remediation" time="0.001">
    </testcase>
    <testcase classname="Convert legacy TestResult to ScanResult can convert pip test result with remediation (pins)" name="Convert legacy TestResult to ScanResult can convert pip test result with remediation (pins)" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="convertEngineToSarifResults" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:35" time="0.186" tests="1">
    <testcase classname="convertEngineToSarifResults returns expected SARIF result" name="convertEngineToSarifResults returns expected SARIF result" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:35" time="0.176" tests="4">
    <testcase classname=" createHumanReadableTestCommandResult" name=" createHumanReadableTestCommandResult" time="0.001">
    </testcase>
    <testcase classname=" createJsonTestCommandResult" name=" createJsonTestCommandResult" time="0">
    </testcase>
    <testcase classname=" CommandResult is a HumanReadableTestCommandResult" name=" CommandResult is a HumanReadableTestCommandResult" time="0">
    </testcase>
    <testcase classname=" CommandResult is a JsonTestCommandResult" name=" CommandResult is a JsonTestCommandResult" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Testing deeproxy URL" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:35" time="0.163" tests="4">
    <testcase classname="Testing deeproxy URL uses api URL to determine deeproxy URL when not provided without app. prefix" name="Testing deeproxy URL uses api URL to determine deeproxy URL when not provided without app. prefix" time="0">
    </testcase>
    <testcase classname="Testing deeproxy URL uses api URL to determine deeproxy URL when provided with app. prefix" name="Testing deeproxy URL uses api URL to determine deeproxy URL when provided with app. prefix" time="0">
    </testcase>
    <testcase classname="Testing deeproxy URL uses api URL to determine deeproxy URL when provided with app. prefix" name="Testing deeproxy URL uses api URL to determine deeproxy URL when provided with app. prefix" time="0">
    </testcase>
    <testcase classname="Testing deeproxy URL uses a custom deeproxy endpoint when provided by SNYK_CODE_CLIENT_PROXY_URL environment" name="Testing deeproxy URL uses a custom deeproxy endpoint when provided by SNYK_CODE_CLIENT_PROXY_URL environment" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getQueryParamsAsString" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:36" time="0.236" tests="3">
    <testcase classname="getQueryParamsAsString returns a string" name="getQueryParamsAsString returns a string" time="0.007">
    </testcase>
    <testcase classname="getQueryParamsAsString returns a string that&apos;s a valid URL query string" name="getQueryParamsAsString returns a string that&apos;s a valid URL query string" time="0.001">
    </testcase>
    <testcase classname="getQueryParamsAsString uses integration name and version" name="getQueryParamsAsString uses integration name and version" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ecosystems" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:36" time="0.656" tests="4">
    <testcase classname="ecosystems getPlugin should return cpp plugin when cpp ecosystem is given" name="ecosystems getPlugin should return cpp plugin when cpp ecosystem is given" time="0.001">
    </testcase>
    <testcase classname="ecosystems getPlugin should return undefined when ecosystem is not supported" name="ecosystems getPlugin should return undefined when ecosystem is not supported" time="0.001">
    </testcase>
    <testcase classname="ecosystems getEcosystem should return cpp ecosystem when options unmanaged is true" name="ecosystems getEcosystem should return cpp ecosystem when options unmanaged is true" time="0">
    </testcase>
    <testcase classname="ecosystems getEcosystem should return null when options unmanaged is false" name="ecosystems getEcosystem should return null when options unmanaged is false" time="0">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:37" time="1.993" tests="4">
    <testcase classname=" no alerts" name=" no alerts" time="0.001">
    </testcase>
    <testcase classname=" register an alert" name=" register an alert" time="0.001">
    </testcase>
    <testcase classname=" register the same alert multiple times" name=" register the same alert multiple times" time="0">
    </testcase>
    <testcase classname=" register two different alerts" name=" register two different alerts" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="hasFeatureFlag fn" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:39" time="0.277" tests="3">
    <testcase classname="hasFeatureFlag fn should validate that given an org with feature flag true as input, hasFeatureFlag returns true" name="hasFeatureFlag fn should validate that given an org with feature flag true as input, hasFeatureFlag returns true" time="0.001">
    </testcase>
    <testcase classname="hasFeatureFlag fn should validate that given an org with feature flag false as input, hasFeatureFlag returns false" name="hasFeatureFlag fn should validate that given an org with feature flag false as input, hasFeatureFlag returns false" time="0">
    </testcase>
    <testcase classname="hasFeatureFlag fn should throw error if there are authentication/authorization failures" name="hasFeatureFlag fn should throw error if there are authentication/authorization failures" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="verify supported nodejs runtime versions" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:39" time="0.197" tests="9">
    <testcase classname="verify supported nodejs runtime versions current runtime is supported" name="verify supported nodejs runtime versions current runtime is supported" time="0">
    </testcase>
    <testcase classname="verify supported nodejs runtime versions pre-release is supported" name="verify supported nodejs runtime versions pre-release is supported" time="0">
    </testcase>
    <testcase classname="verify unsupported nodejs runtime versions v6.16.0 is not supported" name="verify unsupported nodejs runtime versions v6.16.0 is not supported" time="0">
    </testcase>
    <testcase classname="verify unsupported nodejs runtime versions v0.10 is not supported" name="verify unsupported nodejs runtime versions v0.10 is not supported" time="0.001">
    </testcase>
    <testcase classname="verify unsupported nodejs runtime versions v0.12 is not supported" name="verify unsupported nodejs runtime versions v0.12 is not supported" time="0">
    </testcase>
    <testcase classname="verify unsupported nodejs runtime versions v4.0.0 is not supported" name="verify unsupported nodejs runtime versions v4.0.0 is not supported" time="0">
    </testcase>
    <testcase classname="verify unsupported nodejs runtime versions verifies v6.4.0 is not supported" name="verify unsupported nodejs runtime versions verifies v6.4.0 is not supported" time="0">
    </testcase>
    <testcase classname="verify unsupported nodejs runtime versions verifies v8.0.0 is not supported" name="verify unsupported nodejs runtime versions verifies v8.0.0 is not supported" time="0">
    </testcase>
    <testcase classname="verify unsupported nodejs runtime versions verifies v10.0.0 is not supported" name="verify unsupported nodejs runtime versions verifies v10.0.0 is not supported" time="0">
    </testcase>
  </testsuite>
  <testsuite name="applyCustomSeverities" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:39" time="0.223" tests="2">
    <testcase classname="applyCustomSeverities updates existing severity with custom one for the same public id" name="applyCustomSeverities updates existing severity with custom one for the same public id" time="0.001">
    </testcase>
    <testcase classname="applyCustomSeverities does not update existing severity when there is no match for that public id" name="applyCustomSeverities does not update existing severity when there is no match for that public id" time="0">
    </testcase>
  </testsuite>
  <testsuite name="format unresolved item" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:39" time="0.111" tests="3">
    <testcase classname="format unresolved item formats unresolved as expected by default" name="format unresolved item formats unresolved as expected by default" time="0.001">
    </testcase>
    <testcase classname="format unresolved item formats ok when missing targetFile" name="format unresolved item formats ok when missing targetFile" time="0.001">
    </testcase>
    <testcase classname="format unresolved item formats ok with tip" name="format unresolved item formats ok with tip" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getErrorUserMessage" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:39" time="0.217" tests="29">
    <testcase classname="getErrorUserMessage returns INVALID_SNYK_IAC_TEST_ERROR for an invalid snyk-iac-test error code" name="getErrorUserMessage returns INVALID_SNYK_IAC_TEST_ERROR for an invalid snyk-iac-test error code" time="0.002">
    </testcase>
    <testcase classname="getErrorUserMessage returns INVALID_IAC_ERROR for an invalid error code" name="getErrorUserMessage returns INVALID_IAC_ERROR for an invalid error code" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2000" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2000" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2003" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2003" time="0.001">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2004" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2004" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2005" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2005" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2100" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2100" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2101" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2101" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2102" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2102" time="0.001">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2103" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2103" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2104" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2104" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2105" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2105" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2106" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2106" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2107" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2107" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2108" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2108" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2109" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2109" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2110" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2110" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2111" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2111" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2112" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2112" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2113" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2113" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2114" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2114" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2115" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2115" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2116" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2116" time="0.002">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2200" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2200" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2203" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 2203" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 3000" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 3000" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 3001" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 3001" time="0">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 3002" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 3002" time="0.001">
    </testcase>
    <testcase classname="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 3003" name="getErrorUserMessage returns a user message for a valid snyk-iac-test error code - 3003" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getDisplayPath" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:40" time="0.226" tests="4">
    <testcase classname="getDisplayPath paths that do not exist on disk returned as is" name="getDisplayPath paths that do not exist on disk returned as is" time="0.001">
    </testcase>
    <testcase classname="getDisplayPath current path is displayed as ." name="getDisplayPath current path is displayed as ." time="0">
    </testcase>
    <testcase classname="getDisplayPath a local path is returned as relative path to current dir" name="getDisplayPath a local path is returned as relative path to current dir" time="0">
    </testcase>
    <testcase classname="getDisplayPath a local full path is returned as relative path to current dir" name="getDisplayPath a local full path is returned as relative path to current dir" time="0">
    </testcase>
  </testsuite>
  <testsuite name="utils" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:40" time="0.173" tests="2">
    <testcase classname="utils getProjectName if project name flag provided and scannedProject.meta.projectName exists, use the scannedProject value" name="utils getProjectName if project name flag provided and scannedProject.meta.projectName exists, use the scannedProject value" time="0.001">
    </testcase>
    <testcase classname="utils getProjectName if project name flag not provided at all, should return undefined" name="utils getProjectName if project name flag not provided at all, should return undefined" time="0">
    </testcase>
  </testsuite>
  <testsuite name="formatShareResults" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:40" time="0.349" tests="1">
    <testcase classname="formatShareResults returns the formatted results" name="formatShareResults returns the formatted results" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="formatShareResultsOutput" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:40" time="0.223" tests="1">
    <testcase classname="formatShareResultsOutput returns the correct output" name="formatShareResultsOutput returns the correct output" time="0">
    </testcase>
  </testsuite>
  <testsuite name="shouldLogUserMessages" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:41" time="0.207" tests="8">
    <testcase classname="shouldLogUserMessages should return true, with options: {}" name="shouldLogUserMessages should return true, with options: {}" time="0.001">
    </testcase>
    <testcase classname="shouldLogUserMessages should return false, with options: {&quot;json&quot;: true}" name="shouldLogUserMessages should return false, with options: {&quot;json&quot;: true}" time="0">
    </testcase>
    <testcase classname="shouldLogUserMessages should return false, with options: {&quot;sarif&quot;: true}" name="shouldLogUserMessages should return false, with options: {&quot;sarif&quot;: true}" time="0.001">
    </testcase>
    <testcase classname="shouldLogUserMessages should return false, with options: {&quot;quiet&quot;: true}" name="shouldLogUserMessages should return false, with options: {&quot;quiet&quot;: true}" time="0">
    </testcase>
    <testcase classname="shouldLogUserMessages should return false, with options: {&quot;json&quot;: true, &quot;sarif&quot;: true}" name="shouldLogUserMessages should return false, with options: {&quot;json&quot;: true, &quot;sarif&quot;: true}" time="0">
    </testcase>
    <testcase classname="shouldLogUserMessages should return false, with options: {&quot;json&quot;: true, &quot;quiet&quot;: true}" name="shouldLogUserMessages should return false, with options: {&quot;json&quot;: true, &quot;quiet&quot;: true}" time="0">
    </testcase>
    <testcase classname="shouldLogUserMessages should return false, with options: {&quot;quiet&quot;: true, &quot;sarif&quot;: true}" name="shouldLogUserMessages should return false, with options: {&quot;quiet&quot;: true, &quot;sarif&quot;: true}" time="0">
    </testcase>
    <testcase classname="shouldLogUserMessages should return false, with options: {&quot;json&quot;: true, &quot;quiet&quot;: true, &quot;sarif&quot;: true}" name="shouldLogUserMessages should return false, with options: {&quot;json&quot;: true, &quot;quiet&quot;: true, &quot;sarif&quot;: true}" time="0">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:41" time="0.223" tests="1">
    <testcase classname=" test sensibly bails if gets an old .snyk format" name=" test sensibly bails if gets an old .snyk format" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:41" time="0.163" tests="6">
    <testcase classname=" abridge empty string" name=" abridge empty string" time="0.001">
    </testcase>
    <testcase classname=" abridge shorter than max length" name=" abridge shorter than max length" time="0.001">
    </testcase>
    <testcase classname=" abridge same length as max length" name=" abridge same length as max length" time="0.001">
    </testcase>
    <testcase classname=" abridge longer than max length" name=" abridge longer than max length" time="0">
    </testcase>
    <testcase classname=" abridge longer than max length (custom ellipsis)" name=" abridge longer than max length (custom ellipsis)" time="0">
    </testcase>
    <testcase classname=" abridge is not longer than max length" name=" abridge is not longer than max length" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="showAllProjectsTip" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:41" time="0.144" tests="4">
    <testcase classname="showAllProjectsTip gradle project scanned with --all-sub-projects" name="showAllProjectsTip gradle project scanned with --all-sub-projects" time="0">
    </testcase>
    <testcase classname="showAllProjectsTip gradle project scanned without --all-sub-projects with 0 detected extra projects" name="showAllProjectsTip gradle project scanned without --all-sub-projects with 0 detected extra projects" time="0.001">
    </testcase>
    <testcase classname="showAllProjectsTip npm project + detected 8 other projects" name="showAllProjectsTip npm project + detected 8 other projects" time="0">
    </testcase>
    <testcase classname="showAllProjectsTip gradle project + detected 8 other projects" name="showAllProjectsTip gradle project + detected 8 other projects" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getVulnerabilityUrl" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:41" time="0.145" tests="3">
    <testcase classname="getVulnerabilityUrl returns a valid license URL" name="getVulnerabilityUrl returns a valid license URL" time="0.001">
    </testcase>
    <testcase classname="getVulnerabilityUrl returns a valid license URL - UPPERCASE" name="getVulnerabilityUrl returns a valid license URL - UPPERCASE" time="0">
    </testcase>
    <testcase classname="getVulnerabilityUrl returns a valid vulnerability URL" name="getVulnerabilityUrl returns a valid vulnerability URL" time="0">
    </testcase>
  </testsuite>
  <testsuite name="format successful item" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:42" time="0.085" tests="1">
    <testcase classname="format successful item successful item &amp; changes formatted" name="format successful item successful item &amp; changes formatted" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="jsonStringifyLargeObject" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:42" time="0.133" tests="2">
    <testcase classname="jsonStringifyLargeObject works normally with a small object" name="jsonStringifyLargeObject works normally with a small object" time="0.001">
    </testcase>
    <testcase classname="jsonStringifyLargeObject returns empty string on fallback failure" name="jsonStringifyLargeObject returns empty string on fallback failure" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getPathWithOptionalProjectName" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:42" time="0.149" tests="3">
    <testcase classname="getPathWithOptionalProjectName returns given path" name="getPathWithOptionalProjectName returns given path" time="0.002">
    </testcase>
    <testcase classname="getPathWithOptionalProjectName returns given path" name="getPathWithOptionalProjectName returns given path" time="0">
    </testcase>
    <testcase classname="getPathWithOptionalProjectName appends subdirectory from project name" name="getPathWithOptionalProjectName appends subdirectory from project name" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="standardizePackageName" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:42" time="0.087" tests="3">
    <testcase classname="standardizePackageName lowercases as expected" name="standardizePackageName lowercases as expected" time="0.001">
    </testcase>
    <testcase classname="standardizePackageName replaces _  as expected" name="standardizePackageName replaces _  as expected" time="0.001">
    </testcase>
    <testcase classname="standardizePackageName works on package@version" name="standardizePackageName works on package@version" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getErrorStringCode" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:42" time="0.138" tests="2">
    <testcase classname="getErrorStringCode converts invalid IaCErrorCodes error to INVALID_IAC_ERROR" name="getErrorStringCode converts invalid IaCErrorCodes error to INVALID_IAC_ERROR" time="0.001">
    </testcase>
    <testcase classname="getErrorStringCode converts IaCErrorCodes error to UPPER_CASE error string codes" name="getErrorStringCode converts IaCErrorCodes error to UPPER_CASE error string codes" time="0">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:42" time="0.162" tests="1">
    <testcase classname=" test sensibly bails if gets an old .snyk format" name=" test sensibly bails if gets an old .snyk format" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="Woof command - Language option" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:42" time="0.196" tests="3">
    <testcase classname="Woof command - Language option Default language is &quot;en&quot;" name="Woof command - Language option Default language is &quot;en&quot;" time="0.001">
    </testcase>
    <testcase classname="Woof command - Language option Returns selected language" name="Woof command - Language option Returns selected language" time="0">
    </testcase>
    <testcase classname="Woof command - Language option Returns default when selected language is invalid" name="Woof command - Language option Returns default when selected language is invalid" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getSeverityValue" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:43" time="0.163" tests="4">
    <testcase classname="getSeverityValue Critical returns 1" name="getSeverityValue Critical returns 1" time="0.001">
    </testcase>
    <testcase classname="getSeverityValue High returns 2" name="getSeverityValue High returns 2" time="0">
    </testcase>
    <testcase classname="getSeverityValue Medium returns 3" name="getSeverityValue Medium returns 3" time="0.001">
    </testcase>
    <testcase classname="getSeverityValue Low returns 4" name="getSeverityValue Low returns 4" time="0">
    </testcase>
  </testsuite>
  <testsuite name="summariseErrorResults" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:43" time="0.237" tests="2">
    <testcase classname="summariseErrorResults Single test result" name="summariseErrorResults Single test result" time="0.001">
    </testcase>
    <testcase classname="summariseErrorResults Multiple test results" name="summariseErrorResults Multiple test results" time="0">
    </testcase>
  </testsuite>
  <testsuite name="deQuote" errors="0" failures="0" skipped="0" timestamp="2024-06-12T20:46:43" time="0.089" tests="2">
    <testcase classname="deQuote removes single quotes" name="deQuote removes single quotes" time="0.001">
    </testcase>
    <testcase classname="deQuote removes double quotes" name="deQuote removes double quotes" time="0">
    </testcase>
  </testsuite>
</testsuites>